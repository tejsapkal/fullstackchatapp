{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport EmojiPicker from 'emoji-picker-react';\nimport './ChatRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username,\n  recipient\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingUser, setTypingUser] = useState(\"\");\n  const stompClientRef = useRef(null);\n  const latestMessageRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  useEffect(() => {\n    const connectWebSocket = () => {\n      const socket = new SockJS(\"http://localhost:8080/chat\");\n      const client = Stomp.over(socket);\n      client.connect({}, () => {\n        console.log(\"✅ Connected to WebSocket\");\n        const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\n        client.subscribe(topic, msg => {\n          const receivedMessage = JSON.parse(msg.body);\n          setMessages(prev => [...prev, {\n            username: receivedMessage.username,\n            message: receivedMessage.message,\n            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\n            status: receivedMessage.status\n          }]);\n        });\n\n        // ✅ Listen for typing events\n        client.subscribe('/topic/typing', msg => {\n          const typingData = JSON.parse(msg.body);\n          if (typingData.username !== username) {\n            setTypingUser(typingData.username);\n            setIsTyping(true);\n            clearTimeout(typingTimeoutRef.current);\n            typingTimeoutRef.current = setTimeout(() => {\n              setIsTyping(false);\n            }, 3000);\n          }\n        });\n        stompClientRef.current = client;\n      });\n    };\n    connectWebSocket();\n    return () => {\n      if (stompClientRef.current) {\n        stompClientRef.current.disconnect();\n        console.log(\"❌ Disconnected from WebSocket\");\n      }\n    };\n  }, [recipient, username]);\n  useEffect(() => {\n    if (latestMessageRef.current) {\n      latestMessageRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [messages]);\n  const sendMessage = () => {\n    if (stompClientRef.current && stompClientRef.current.connected) {\n      const chatMessage = {\n        username: username || \"Anonymous\",\n        message: message || \"Empty message\",\n        recipient: recipient || \"\",\n        timestamp: new Date().toLocaleTimeString(),\n        status: \"Sent\"\n      };\n      stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n      setMessage(\"\");\n    } else {\n      console.error(\"❌ WebSocket is not connected!\");\n      alert(\"Failed to send message. Connection not established.\");\n    }\n  };\n  const handleTyping = () => {\n    if (stompClientRef.current && stompClientRef.current.connected) {\n      stompClientRef.current.send(\"/app/typing\", {}, JSON.stringify({\n        username\n      }));\n    }\n  };\n  const toggleTheme = () => {\n    setDarkMode(prevMode => !prevMode);\n    document.body.classList.toggle('dark-page', !darkMode);\n  };\n  const handleEmojiClick = emojiObject => {\n    setMessage(prev => prev + emojiObject.emoji);\n    setShowEmojiPicker(false);\n  };\n  const getInitials = name => {\n    return name ? name.charAt(0).toUpperCase() : \"?\";\n  };\n  const getRandomColor = name => {\n    const colors = [\"#FF5733\", \"#33FF57\", \"#3357FF\", \"#FF33A8\", \"#FF8C33\"];\n    let index = name ? name.charCodeAt(0) % colors.length : 0;\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-container ${darkMode ? 'dark-theme' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Active Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: activeUsers.length > 0 ? activeUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"No active users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: recipient ? `Private Chat with ${recipient}` : \"Group Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"theme-toggle-btn\",\n          onClick: toggleTheme,\n          children: darkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search messages...\",\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: index === messages.length - 1 ? latestMessageRef : null,\n          className: `message ${msg.username === username ? \"sent\" : \"received\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profile-initials\",\n            style: {\n              backgroundColor: getRandomColor(msg.username)\n            },\n            children: getInitials(msg.username)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: msg.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 40\n              }, this), \": \", msg.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [msg.timestamp, \" \\u2022 \", msg.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages found...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this), isTyping && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"typing-indicator\",\n          children: [typingUser, \" is typing...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"emoji-btn\",\n          onClick: () => setShowEmojiPicker(prev => !prev),\n          children: \"\\uD83D\\uDE0A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emoji-picker-container\",\n          children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n            onEmojiClick: handleEmojiClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => {\n            setMessage(e.target.value);\n            handleTyping();\n          },\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"he0kHt3d7zARIviMp7HRm7ni4KY=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","useRef","SockJS","Stomp","EmojiPicker","jsxDEV","_jsxDEV","ChatRoom","username","recipient","_s","messages","setMessages","message","setMessage","activeUsers","setActiveUsers","searchQuery","setSearchQuery","darkMode","setDarkMode","showEmojiPicker","setShowEmojiPicker","isTyping","setIsTyping","typingUser","setTypingUser","stompClientRef","latestMessageRef","typingTimeoutRef","connectWebSocket","socket","client","over","connect","console","log","topic","subscribe","msg","receivedMessage","JSON","parse","body","prev","timestamp","Date","toLocaleTimeString","status","typingData","clearTimeout","current","setTimeout","disconnect","scrollIntoView","behavior","sendMessage","connected","chatMessage","send","stringify","error","alert","handleTyping","toggleTheme","prevMode","document","classList","toggle","handleEmojiClick","emojiObject","emoji","getInitials","name","charAt","toUpperCase","getRandomColor","colors","index","charCodeAt","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","onClick","type","placeholder","value","onChange","e","target","ref","style","backgroundColor","onEmojiClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport EmojiPicker from 'emoji-picker-react';\r\nimport './ChatRoom.css';\r\n\r\nconst ChatRoom = ({ username, recipient }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [activeUsers, setActiveUsers] = useState([]);\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [typingUser, setTypingUser] = useState(\"\");\r\n\r\n    const stompClientRef = useRef(null);\r\n    const latestMessageRef = useRef(null);\r\n    const typingTimeoutRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const connectWebSocket = () => {\r\n            const socket = new SockJS(\"http://localhost:8080/chat\");\r\n            const client = Stomp.over(socket);\r\n\r\n            client.connect({}, () => {\r\n                console.log(\"✅ Connected to WebSocket\");\r\n\r\n                const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\r\n\r\n                client.subscribe(topic, (msg) => {\r\n                    const receivedMessage = JSON.parse(msg.body);\r\n                    setMessages((prev) => [\r\n                        ...prev,\r\n                        {\r\n                            username: receivedMessage.username,\r\n                            message: receivedMessage.message,\r\n                            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\r\n                            status: receivedMessage.status\r\n                        }\r\n                    ]);\r\n                });\r\n\r\n                // ✅ Listen for typing events\r\n                client.subscribe('/topic/typing', (msg) => {\r\n                    const typingData = JSON.parse(msg.body);\r\n                    if (typingData.username !== username) {\r\n                        setTypingUser(typingData.username);\r\n                        setIsTyping(true);\r\n                        clearTimeout(typingTimeoutRef.current);\r\n                        typingTimeoutRef.current = setTimeout(() => {\r\n                            setIsTyping(false);\r\n                        }, 3000);\r\n                    }\r\n                });\r\n\r\n                stompClientRef.current = client;\r\n            });\r\n        };\r\n\r\n        connectWebSocket();\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.disconnect();\r\n                console.log(\"❌ Disconnected from WebSocket\");\r\n            }\r\n        };\r\n    }, [recipient, username]);\r\n\r\n    useEffect(() => {\r\n        if (latestMessageRef.current) {\r\n            latestMessageRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [messages]);\r\n\r\n    const sendMessage = () => {\r\n        if (stompClientRef.current && stompClientRef.current.connected) {\r\n            const chatMessage = {\r\n                username: username || \"Anonymous\",\r\n                message: message || \"Empty message\",\r\n                recipient: recipient || \"\",\r\n                timestamp: new Date().toLocaleTimeString(),\r\n                status: \"Sent\"\r\n            };\r\n\r\n            stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\r\n            setMessage(\"\");\r\n        } else {\r\n            console.error(\"❌ WebSocket is not connected!\");\r\n            alert(\"Failed to send message. Connection not established.\");\r\n        }\r\n    };\r\n\r\n    const handleTyping = () => {\r\n        if (stompClientRef.current && stompClientRef.current.connected) {\r\n            stompClientRef.current.send(\"/app/typing\", {}, JSON.stringify({ username }));\r\n        }\r\n    };\r\n\r\n    const toggleTheme = () => {\r\n        setDarkMode((prevMode) => !prevMode);\r\n        document.body.classList.toggle('dark-page', !darkMode);\r\n    };\r\n\r\n    const handleEmojiClick = (emojiObject) => {\r\n        setMessage((prev) => prev + emojiObject.emoji);\r\n        setShowEmojiPicker(false);\r\n    };\r\n\r\n    const getInitials = (name) => {\r\n        return name ? name.charAt(0).toUpperCase() : \"?\";\r\n    };\r\n\r\n    const getRandomColor = (name) => {\r\n        const colors = [\"#FF5733\", \"#33FF57\", \"#3357FF\", \"#FF33A8\", \"#FF8C33\"];\r\n        let index = name ? name.charCodeAt(0) % colors.length : 0;\r\n        return colors[index];\r\n    };\r\n\r\n    return (\r\n        <div className={`chat-container ${darkMode ? 'dark-theme' : ''}`}>\r\n\r\n            <div className=\"sidebar\">\r\n                <h3>Active Users</h3>\r\n                <ul>\r\n                    {activeUsers.length > 0 ? (\r\n                        activeUsers.map((user, index) => (\r\n                            <li key={index}>{user}</li>\r\n                        ))\r\n                    ) : (\r\n                        <li>No active users</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-header\">\r\n                    <h2>{recipient ? `Private Chat with ${recipient}` : \"Group Chat\"}</h2>\r\n\r\n                    <button className=\"theme-toggle-btn\" onClick={toggleTheme}>\r\n                        {darkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\"}\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"search-bar\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search messages...\"\r\n                        value={searchQuery}\r\n                        onChange={(e) => setSearchQuery(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"messages\">\r\n                    {messages.length > 0 ? (\r\n                        messages.map((msg, index) => (\r\n                            <div\r\n                                key={index}\r\n                                ref={index === messages.length - 1 ? latestMessageRef : null}\r\n                                className={`message ${msg.username === username ? \"sent\" : \"received\"}`}\r\n                            >\r\n                                <div\r\n                                    className=\"profile-initials\"\r\n                                    style={{ backgroundColor: getRandomColor(msg.username) }}\r\n                                >\r\n                                    {getInitials(msg.username)}\r\n                                </div>\r\n\r\n                                <div className=\"message-bubble\">\r\n                                    <p><strong>{msg.username}</strong>: {msg.message}</p>\r\n                                    <small>{msg.timestamp} • {msg.status}</small>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <p>No messages found...</p>\r\n                    )}\r\n                    {/* ✅ Typing Indicator */}\r\n                    {isTyping && <p className=\"typing-indicator\">{typingUser} is typing...</p>}\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <button className=\"emoji-btn\" onClick={() => setShowEmojiPicker((prev) => !prev)}>\r\n                        😊\r\n                    </button>\r\n\r\n                    {showEmojiPicker && (\r\n                        <div className=\"emoji-picker-container\">\r\n                            <EmojiPicker onEmojiClick={handleEmojiClick} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => {\r\n                            setMessage(e.target.value);\r\n                            handleTyping();\r\n                        }}\r\n                        placeholder=\"Type a message...\"\r\n                    />\r\n                    <button onClick={sendMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}