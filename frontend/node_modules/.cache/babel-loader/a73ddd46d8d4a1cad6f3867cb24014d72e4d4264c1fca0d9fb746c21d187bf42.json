{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport SockJS from \"sockjs-client\";\nimport { Stomp } from \"@stomp/stompjs\";\nimport \"./ChatRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username,\n  recipient\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [activeUsers, setActiveUsers] = useState([]);\n  const stompClientRef = useRef(null);\n  useEffect(() => {\n    const socket = new SockJS(\"http://localhost:8080/chat\");\n    const client = Stomp.over(socket);\n    client.connect({}, () => {\n      console.log(\"✅ Connected to WebSocket\");\n      const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\n\n      // ✅ Subscribe to group/private chat\n      client.subscribe(topic, msg => {\n        const receivedMessage = JSON.parse(msg.body);\n        setMessages(prev => [...prev, {\n          username: receivedMessage.username,\n          message: receivedMessage.message,\n          timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\n          status: receivedMessage.status\n        }]);\n      });\n\n      // ✅ Subscribe to active users\n      client.subscribe(\"/topic/active-users\", msg => {\n        const users = JSON.parse(msg.body);\n        setActiveUsers(users);\n        console.log(\"Active Users:\", users);\n      });\n\n      // ✅ Notify server of user joining\n      const joinMessage = {\n        username: username,\n        message: \"joined the chat\",\n        timestamp: new Date().toLocaleTimeString(),\n        status: \"Joined\"\n      };\n      client.send(\"/app/join\", {}, JSON.stringify(joinMessage));\n      stompClientRef.current = client;\n    });\n    return () => {\n      if (stompClientRef.current) {\n        stompClientRef.current.disconnect();\n        console.log(\"❌ Disconnected from WebSocket\");\n      }\n    };\n  }, [recipient, username]);\n  const sendMessage = () => {\n    if (stompClientRef.current && stompClientRef.current.connected) {\n      const chatMessage = {\n        username: username,\n        message: message,\n        recipient: recipient || \"\",\n        timestamp: new Date().toLocaleTimeString(),\n        status: \"Sent\"\n      };\n      stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n      setMessage(\"\");\n    } else {\n      alert(\"Failed to send message. Connection not established.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Active Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: activeUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: recipient ? `Private Chat with ${recipient}` : \"Group Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-bubble ${msg.username === username ? \"sent\" : \"received\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: msg.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 32\n            }, this), \": \", msg.message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [msg.timestamp, \" \\u2022 \", msg.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"jM/sDiw81dYvp876yuGznOW9nk0=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","useRef","SockJS","Stomp","jsxDEV","_jsxDEV","ChatRoom","username","recipient","_s","messages","setMessages","message","setMessage","activeUsers","setActiveUsers","stompClientRef","socket","client","over","connect","console","log","topic","subscribe","msg","receivedMessage","JSON","parse","body","prev","timestamp","Date","toLocaleTimeString","status","users","joinMessage","send","stringify","current","disconnect","sendMessage","connected","chatMessage","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { Stomp } from \"@stomp/stompjs\";\r\nimport \"./ChatRoom.css\";\r\n\r\nconst ChatRoom = ({ username, recipient }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [activeUsers, setActiveUsers] = useState([]);\r\n    const stompClientRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const socket = new SockJS(\"http://localhost:8080/chat\");\r\n        const client = Stomp.over(socket);\r\n\r\n        client.connect({}, () => {\r\n            console.log(\"✅ Connected to WebSocket\");\r\n\r\n            const topic = recipient\r\n                ? `/topic/private/${recipient}`\r\n                : `/topic/messages`;\r\n\r\n            // ✅ Subscribe to group/private chat\r\n            client.subscribe(topic, (msg) => {\r\n                const receivedMessage = JSON.parse(msg.body);\r\n\r\n                setMessages((prev) => [\r\n                    ...prev,\r\n                    {\r\n                        username: receivedMessage.username,\r\n                        message: receivedMessage.message,\r\n                        timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\r\n                        status: receivedMessage.status,\r\n                    }\r\n                ]);\r\n            });\r\n\r\n            // ✅ Subscribe to active users\r\n            client.subscribe(\"/topic/active-users\", (msg) => {\r\n                const users = JSON.parse(msg.body);\r\n                setActiveUsers(users);\r\n                console.log(\"Active Users:\", users);\r\n            });\r\n\r\n            // ✅ Notify server of user joining\r\n            const joinMessage = {\r\n                username: username,\r\n                message: \"joined the chat\",\r\n                timestamp: new Date().toLocaleTimeString(),\r\n                status: \"Joined\"\r\n            };\r\n\r\n            client.send(\"/app/join\", {}, JSON.stringify(joinMessage));\r\n\r\n            stompClientRef.current = client;\r\n        });\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.disconnect();\r\n                console.log(\"❌ Disconnected from WebSocket\");\r\n            }\r\n        };\r\n    }, [recipient, username]);\r\n\r\n    const sendMessage = () => {\r\n        if (stompClientRef.current && stompClientRef.current.connected) {\r\n            const chatMessage = {\r\n                username: username,\r\n                message: message,\r\n                recipient: recipient || \"\",\r\n                timestamp: new Date().toLocaleTimeString(),\r\n                status: \"Sent\",\r\n            };\r\n\r\n            stompClientRef.current.send(\r\n                \"/app/sendMessage\",\r\n                {},\r\n                JSON.stringify(chatMessage)\r\n            );\r\n\r\n            setMessage(\"\");\r\n        } else {\r\n            alert(\"Failed to send message. Connection not established.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"sidebar\">\r\n                <h3>Active Users</h3>\r\n                <ul>\r\n                    {activeUsers.map((user, index) => (\r\n                        <li key={index}>{user}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-box\">\r\n                <h2>{recipient ? `Private Chat with ${recipient}` : \"Group Chat\"}</h2>\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className={`message-bubble ${msg.username === username ? \"sent\" : \"received\"}`}\r\n                        >\r\n                            <p><strong>{msg.username}</strong>: {msg.message}</p>\r\n                            <small>{msg.timestamp} • {msg.status}</small>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}