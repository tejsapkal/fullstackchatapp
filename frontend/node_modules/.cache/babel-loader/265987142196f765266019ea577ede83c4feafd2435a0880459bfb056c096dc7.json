{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport SockJS from \"sockjs-client\";\nimport MessageList from \"./MessageList\";\nimport MessageInput from \"./MessageInput\";\nimport UserList from \"./UserList\";\nimport \"./ChatRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const clientRef = useRef(null);\n  const [connected, setConnected] = useState(false);\n\n  // ✅ New: Retry connection logic\n  const retryInterval = useRef(null);\n  useEffect(() => {\n    const connectToWebSocket = () => {\n      const socket = new SockJS(\"http://localhost:8080/ws\");\n      const client = new Client({\n        webSocketFactory: () => socket,\n        reconnectDelay: 5000,\n        onConnect: () => {\n          console.log(\"✅ Connected to WebSocket\");\n          setConnected(true);\n\n          // ✅ Clear retry interval when connected\n          if (retryInterval.current) {\n            clearInterval(retryInterval.current);\n          }\n\n          // ✅ Subscribe to message and user topics\n          client.subscribe(\"/topic/messages\", message => {\n            const newMessage = JSON.parse(message.body);\n            setMessages(prev => [...prev, newMessage]);\n          });\n          client.subscribe(\"/topic/users\", userList => {\n            const updatedUsers = JSON.parse(userList.body);\n            setUsers(updatedUsers);\n          });\n\n          // ✅ Send username on connect\n          client.publish({\n            destination: \"/app/chat.register\",\n            body: JSON.stringify({\n              sender: username,\n              content: \"JOIN\"\n            })\n          });\n        },\n        onDisconnect: () => {\n          console.log(\"❌ Disconnected from WebSocket\");\n          setConnected(false);\n        },\n        onStompError: error => {\n          console.error(\"STOMP error:\", error);\n        }\n      });\n      clientRef.current = client;\n      client.activate();\n    };\n\n    // ✅ Attempt connection on mount\n    connectToWebSocket();\n\n    // ✅ Retry connection every 5 seconds if disconnected\n    retryInterval.current = setInterval(() => {\n      if (!connected) {\n        console.log(\"🔄 Retrying connection...\");\n        connectToWebSocket();\n      }\n    }, 5000);\n    return () => {\n      if (clientRef.current) {\n        clientRef.current.deactivate();\n      }\n      clearInterval(retryInterval.current);\n    };\n  }, [username, connected]);\n\n  // ✅ Improved sendMessage function with retry\n  const sendMessage = content => {\n    if (connected && clientRef.current && clientRef.current.connected) {\n      clientRef.current.publish({\n        destination: \"/app/chat.send\",\n        body: JSON.stringify({\n          sender: username,\n          content\n        })\n      });\n    } else {\n      console.warn(\"⚠️ Cannot send message - No STOMP connection. Retrying...\");\n      setTimeout(() => sendMessage(content), 1000); // ✅ Retry sending after 1 second\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room\",\n    children: [/*#__PURE__*/_jsxDEV(UserList, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"QKLkxrncHTfgkDS97H78LJFZvNk=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Client","SockJS","MessageList","MessageInput","UserList","jsxDEV","_jsxDEV","ChatRoom","username","_s","messages","setMessages","users","setUsers","clientRef","connected","setConnected","retryInterval","connectToWebSocket","socket","client","webSocketFactory","reconnectDelay","onConnect","console","log","current","clearInterval","subscribe","message","newMessage","JSON","parse","body","prev","userList","updatedUsers","publish","destination","stringify","sender","content","onDisconnect","onStompError","error","activate","setInterval","deactivate","sendMessage","warn","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\nimport MessageList from \"./MessageList\";\r\nimport MessageInput from \"./MessageInput\";\r\nimport UserList from \"./UserList\";\r\nimport \"./ChatRoom.css\";\r\n\r\nconst ChatRoom = ({ username }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const clientRef = useRef(null);\r\n  const [connected, setConnected] = useState(false);  \r\n\r\n  // ✅ New: Retry connection logic\r\n  const retryInterval = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const connectToWebSocket = () => {\r\n      const socket = new SockJS(\"http://localhost:8080/ws\");\r\n      const client = new Client({\r\n        webSocketFactory: () => socket,\r\n        reconnectDelay: 5000,\r\n        onConnect: () => {\r\n          console.log(\"✅ Connected to WebSocket\");\r\n          setConnected(true);\r\n\r\n          // ✅ Clear retry interval when connected\r\n          if (retryInterval.current) {\r\n            clearInterval(retryInterval.current);\r\n          }\r\n\r\n          // ✅ Subscribe to message and user topics\r\n          client.subscribe(\"/topic/messages\", (message) => {\r\n            const newMessage = JSON.parse(message.body);\r\n            setMessages((prev) => [...prev, newMessage]);\r\n          });\r\n\r\n          client.subscribe(\"/topic/users\", (userList) => {\r\n            const updatedUsers = JSON.parse(userList.body);\r\n            setUsers(updatedUsers);\r\n          });\r\n\r\n          // ✅ Send username on connect\r\n          client.publish({\r\n            destination: \"/app/chat.register\",\r\n            body: JSON.stringify({ sender: username, content: \"JOIN\" }),\r\n          });\r\n        },\r\n        onDisconnect: () => {\r\n          console.log(\"❌ Disconnected from WebSocket\");\r\n          setConnected(false);\r\n        },\r\n        onStompError: (error) => {\r\n          console.error(\"STOMP error:\", error);\r\n        },\r\n      });\r\n\r\n      clientRef.current = client;\r\n      client.activate();\r\n    };\r\n\r\n    // ✅ Attempt connection on mount\r\n    connectToWebSocket();\r\n\r\n    // ✅ Retry connection every 5 seconds if disconnected\r\n    retryInterval.current = setInterval(() => {\r\n      if (!connected) {\r\n        console.log(\"🔄 Retrying connection...\");\r\n        connectToWebSocket();\r\n      }\r\n    }, 5000);\r\n\r\n    return () => {\r\n      if (clientRef.current) {\r\n        clientRef.current.deactivate();\r\n      }\r\n      clearInterval(retryInterval.current);\r\n    };\r\n  }, [username, connected]);\r\n\r\n  // ✅ Improved sendMessage function with retry\r\n  const sendMessage = (content) => {\r\n    if (connected && clientRef.current && clientRef.current.connected) {\r\n      clientRef.current.publish({\r\n        destination: \"/app/chat.send\",\r\n        body: JSON.stringify({ sender: username, content }),\r\n      });\r\n    } else {\r\n      console.warn(\"⚠️ Cannot send message - No STOMP connection. Retrying...\");\r\n      setTimeout(() => sendMessage(content), 1000);  // ✅ Retry sending after 1 second\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-room\">\r\n      <UserList users={users} />\r\n      <div className=\"chat-container\">\r\n        <MessageList messages={messages} />\r\n        <MessageInput onSendMessage={sendMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}