{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Client } from '@stomp/stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [isConnected, setIsConnected] = useState(false); // ✅ Added connection state\n\n  useEffect(() => {\n    const client = new Client({\n      brokerURL: \"ws://localhost:8080/ws\",\n      reconnectDelay: 5000,\n      heartbeatIncoming: 4000,\n      heartbeatOutgoing: 4000\n    });\n    client.onConnect = () => {\n      console.log(\"Connected to WebSocket ✅\");\n      setIsConnected(true); // ✅ Mark as connected\n\n      client.subscribe(\"/topic/public\", message => {\n        const msg = JSON.parse(message.body);\n        setChatMessages(prev => [...prev, msg]);\n      });\n      setStompClient(client);\n    };\n    client.onStompError = frame => {\n      console.error(\"Broker reported error: \", frame.headers[\"message\"]);\n      console.error(\"Additional details: \", frame.body);\n      setIsConnected(false); // ❌ Mark as disconnected\n    };\n    client.activate();\n    return () => {\n      if (client) {\n        client.deactivate();\n        setIsConnected(false);\n      }\n    };\n  }, []);\n  const sendMessage = () => {\n    if (!stompClient || !isConnected) {\n      console.warn(\"WebSocket not connected, cannot send message!\");\n      return;\n    }\n    const chatMessage = {\n      sender: \"User\",\n      // Replace with dynamic username later\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    stompClient.publish({\n      destination: \"/app/chat.sendMessage\",\n      body: JSON.stringify(chatMessage)\n    });\n    setMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Chat Room \", isConnected ? \"🟢\" : \"🔴\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      disabled: !isConnected,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"83U6haS8ehr0S8pY7DzPY1HHgF4=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","Client","jsxDEV","_jsxDEV","ChatRoom","_s","stompClient","setStompClient","message","setMessage","chatMessages","setChatMessages","isConnected","setIsConnected","client","brokerURL","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","console","log","subscribe","msg","JSON","parse","body","prev","onStompError","frame","error","headers","activate","deactivate","sendMessage","warn","chatMessage","sender","content","timestamp","Date","toISOString","publish","destination","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","onChange","e","target","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nconst ChatRoom = () => {\r\n  const [stompClient, setStompClient] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [isConnected, setIsConnected] = useState(false);  // ✅ Added connection state\r\n\r\n  useEffect(() => {\r\n    const client = new Client({\r\n      brokerURL: \"ws://localhost:8080/ws\",\r\n      reconnectDelay: 5000,\r\n      heartbeatIncoming: 4000,\r\n      heartbeatOutgoing: 4000,\r\n    });\r\n\r\n    client.onConnect = () => {\r\n      console.log(\"Connected to WebSocket ✅\");\r\n      setIsConnected(true);  // ✅ Mark as connected\r\n\r\n      client.subscribe(\"/topic/public\", (message) => {\r\n        const msg = JSON.parse(message.body);\r\n        setChatMessages((prev) => [...prev, msg]);\r\n      });\r\n\r\n      setStompClient(client);\r\n    };\r\n\r\n    client.onStompError = (frame) => {\r\n      console.error(\"Broker reported error: \", frame.headers[\"message\"]);\r\n      console.error(\"Additional details: \", frame.body);\r\n      setIsConnected(false);  // ❌ Mark as disconnected\r\n    };\r\n\r\n    client.activate();\r\n\r\n    return () => {\r\n      if (client) {\r\n        client.deactivate();\r\n        setIsConnected(false);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = () => {\r\n    if (!stompClient || !isConnected) {\r\n      console.warn(\"WebSocket not connected, cannot send message!\");\r\n      return;\r\n    }\r\n\r\n    const chatMessage = {\r\n      sender: \"User\",  // Replace with dynamic username later\r\n      content: message,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n\r\n    stompClient.publish({\r\n      destination: \"/app/chat.sendMessage\",\r\n      body: JSON.stringify(chatMessage),\r\n    });\r\n\r\n    setMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Chat Room {isConnected ? \"🟢\" : \"🔴\"}</h2>\r\n      <div>\r\n        {chatMessages.map((msg, index) => (\r\n          <div key={index}>\r\n            <strong>{msg.sender}:</strong> {msg.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        placeholder=\"Type a message...\"\r\n      />\r\n      <button onClick={sendMessage} disabled={!isConnected}>\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}