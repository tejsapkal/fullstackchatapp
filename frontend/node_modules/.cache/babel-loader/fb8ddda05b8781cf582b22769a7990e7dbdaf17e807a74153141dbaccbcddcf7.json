{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const stompClientRef = useRef(null);\n  useEffect(() => {\n    const socket = new SockJS(\"http://localhost:8080/chat\");\n    const client = Stomp.over(socket);\n    client.connect({}, () => {\n      client.subscribe(\"/topic/messages\", msg => {\n        const receivedMessage = JSON.parse(msg.body);\n        setMessages(prev => [...prev, receivedMessage]);\n      });\n      stompClientRef.current = client;\n    });\n    return () => {\n      if (stompClientRef.current) {\n        stompClientRef.current.disconnect();\n      }\n    };\n  }, []);\n  const sendMessage = () => {\n    const chatMessage = {\n      username: username || \"Anonymous\",\n      message: message || \"Empty message\"\n    };\n    stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n    setMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minHeight: \"300px\",\n        border: \"1px solid #ccc\",\n        padding: \"10px\"\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.username, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), \" \", msg.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"IiCWAd+IRXYeQ8C5V2kZIzieyxI=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","useRef","SockJS","Stomp","jsxDEV","_jsxDEV","ChatRoom","username","_s","messages","setMessages","message","setMessage","stompClientRef","socket","client","over","connect","subscribe","msg","receivedMessage","JSON","parse","body","prev","current","disconnect","sendMessage","chatMessage","send","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","style","minHeight","border","padding","map","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\n\r\nconst ChatRoom = ({ username }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const stompClientRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const socket = new SockJS(\"http://localhost:8080/chat\");\r\n        const client = Stomp.over(socket);\r\n\r\n        client.connect({}, () => {\r\n            client.subscribe(\"/topic/messages\", (msg) => {\r\n                const receivedMessage = JSON.parse(msg.body);\r\n                setMessages((prev) => [...prev, receivedMessage]);\r\n            });\r\n\r\n            stompClientRef.current = client;\r\n        });\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.disconnect();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const sendMessage = () => {\r\n        const chatMessage = {\r\n            username: username || \"Anonymous\",\r\n            message: message || \"Empty message\"\r\n        };\r\n        stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\r\n        setMessage(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Chat Room</h2>\r\n            <div style={{ minHeight: \"300px\", border: \"1px solid #ccc\", padding: \"10px\" }}>\r\n                {messages.map((msg, index) => (\r\n                    <p key={index}>\r\n                        <strong>{msg.username}:</strong> {msg.message}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n                placeholder=\"Type a message...\"\r\n            />\r\n            <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}