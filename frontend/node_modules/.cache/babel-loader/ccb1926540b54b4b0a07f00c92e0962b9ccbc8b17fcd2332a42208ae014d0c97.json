{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username,\n  recipient\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const stompClientRef = useRef(null);\n  useEffect(() => {\n    const socket = new SockJS(\"http://localhost:8080/chat\");\n    const client = Stomp.over(socket);\n    client.connect({}, () => {\n      console.log(\"Connected to WebSocket\");\n\n      // Subscribe to group or private chat based on recipient\n      const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\n      client.subscribe(topic, msg => {\n        const receivedMessage = JSON.parse(msg.body);\n        setMessages(prev => [...prev, receivedMessage]);\n      });\n      stompClientRef.current = client;\n    });\n    return () => {\n      if (stompClientRef.current) {\n        stompClientRef.current.disconnect();\n        console.log(\"Disconnected from WebSocket\");\n      }\n    };\n  }, [recipient]);\n  const sendMessage = () => {\n    if (stompClientRef.current && stompClientRef.current.connected) {\n      // ✅ Check connection\n      const chatMessage = {\n        username: username || \"Anonymous\",\n        message: message || \"Empty message\",\n        recipient: recipient || \"\" // Add recipient for private chat\n      };\n\n      // Send the message\n      stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n      setMessage(\"\");\n    } else {\n      console.error(\"WebSocket is not connected!\");\n      alert(\"Failed to send message. Connection not established.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: recipient ? `Private Chat with ${recipient}` : \"Group Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minHeight: \"300px\",\n        border: \"1px solid #ccc\",\n        padding: \"10px\"\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.username, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this), \" \", msg.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"IiCWAd+IRXYeQ8C5V2kZIzieyxI=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","useRef","SockJS","Stomp","jsxDEV","_jsxDEV","ChatRoom","username","recipient","_s","messages","setMessages","message","setMessage","stompClientRef","socket","client","over","connect","console","log","topic","subscribe","msg","receivedMessage","JSON","parse","body","prev","current","disconnect","sendMessage","connected","chatMessage","send","stringify","error","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","style","minHeight","border","padding","map","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\n\r\nconst ChatRoom = ({ username, recipient }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const stompClientRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const socket = new SockJS(\"http://localhost:8080/chat\");\r\n        const client = Stomp.over(socket);\r\n\r\n        client.connect({}, () => {\r\n            console.log(\"Connected to WebSocket\");\r\n            \r\n            // Subscribe to group or private chat based on recipient\r\n            const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\r\n\r\n            client.subscribe(topic, (msg) => {\r\n                const receivedMessage = JSON.parse(msg.body);\r\n                setMessages((prev) => [...prev, receivedMessage]);\r\n            });\r\n\r\n            stompClientRef.current = client;\r\n        });\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.disconnect();\r\n                console.log(\"Disconnected from WebSocket\");\r\n            }\r\n        };\r\n    }, [recipient]);\r\n\r\n    const sendMessage = () => {\r\n        if (stompClientRef.current && stompClientRef.current.connected) {   // ✅ Check connection\r\n            const chatMessage = {\r\n                username: username || \"Anonymous\",\r\n                message: message || \"Empty message\",\r\n                recipient: recipient || \"\"   // Add recipient for private chat\r\n            };\r\n\r\n            // Send the message\r\n            stompClientRef.current.send(\r\n                \"/app/sendMessage\",\r\n                {},\r\n                JSON.stringify(chatMessage)\r\n            );\r\n\r\n            setMessage(\"\");\r\n        } else {\r\n            console.error(\"WebSocket is not connected!\");\r\n            alert(\"Failed to send message. Connection not established.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>{recipient ? `Private Chat with ${recipient}` : \"Group Chat\"}</h2>\r\n            <div style={{ minHeight: \"300px\", border: \"1px solid #ccc\", padding: \"10px\" }}>\r\n                {messages.map((msg, index) => (\r\n                    <p key={index}>\r\n                        <strong>{msg.username}:</strong> {msg.message}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n                placeholder=\"Type a message...\"\r\n            />\r\n            <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMc,cAAc,GAAGb,MAAM,CAAC,IAAI,CAAC;EAEnCF,SAAS,CAAC,MAAM;IACZ,MAAMgB,MAAM,GAAG,IAAIb,MAAM,CAAC,4BAA4B,CAAC;IACvD,MAAMc,MAAM,GAAGb,KAAK,CAACc,IAAI,CAACF,MAAM,CAAC;IAEjCC,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;MACrBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;MAErC;MACA,MAAMC,KAAK,GAAGb,SAAS,GAAG,kBAAkBA,SAAS,EAAE,GAAG,iBAAiB;MAE3EQ,MAAM,CAACM,SAAS,CAACD,KAAK,EAAGE,GAAG,IAAK;QAC7B,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAACI,IAAI,CAAC;QAC5ChB,WAAW,CAAEiB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEJ,eAAe,CAAC,CAAC;MACrD,CAAC,CAAC;MAEFV,cAAc,CAACe,OAAO,GAAGb,MAAM;IACnC,CAAC,CAAC;IAEF,OAAO,MAAM;MACT,IAAIF,cAAc,CAACe,OAAO,EAAE;QACxBf,cAAc,CAACe,OAAO,CAACC,UAAU,CAAC,CAAC;QACnCX,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC9C;IACJ,CAAC;EACL,CAAC,EAAE,CAACZ,SAAS,CAAC,CAAC;EAEf,MAAMuB,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIjB,cAAc,CAACe,OAAO,IAAIf,cAAc,CAACe,OAAO,CAACG,SAAS,EAAE;MAAI;MAChE,MAAMC,WAAW,GAAG;QAChB1B,QAAQ,EAAEA,QAAQ,IAAI,WAAW;QACjCK,OAAO,EAAEA,OAAO,IAAI,eAAe;QACnCJ,SAAS,EAAEA,SAAS,IAAI,EAAE,CAAG;MACjC,CAAC;;MAED;MACAM,cAAc,CAACe,OAAO,CAACK,IAAI,CACvB,kBAAkB,EAClB,CAAC,CAAC,EACFT,IAAI,CAACU,SAAS,CAACF,WAAW,CAC9B,CAAC;MAEDpB,UAAU,CAAC,EAAE,CAAC;IAClB,CAAC,MAAM;MACHM,OAAO,CAACiB,KAAK,CAAC,6BAA6B,CAAC;MAC5CC,KAAK,CAAC,qDAAqD,CAAC;IAChE;EACJ,CAAC;EAED,oBACIhC,OAAA;IAAAiC,QAAA,gBACIjC,OAAA;MAAAiC,QAAA,EAAK9B,SAAS,GAAG,qBAAqBA,SAAS,EAAE,GAAG;IAAY;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACtErC,OAAA;MAAKsC,KAAK,EAAE;QAAEC,SAAS,EAAE,OAAO;QAAEC,MAAM,EAAE,gBAAgB;QAAEC,OAAO,EAAE;MAAO,CAAE;MAAAR,QAAA,EACzE5B,QAAQ,CAACqC,GAAG,CAAC,CAACxB,GAAG,EAAEyB,KAAK,kBACrB3C,OAAA;QAAAiC,QAAA,gBACIjC,OAAA;UAAAiC,QAAA,GAASf,GAAG,CAAChB,QAAQ,EAAC,GAAC;QAAA;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACnB,GAAG,CAACX,OAAO;MAAA,GADzCoC,KAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNrC,OAAA;MACI4C,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEtC,OAAQ;MACfuC,QAAQ,EAAGC,CAAC,IAAKvC,UAAU,CAACuC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC5CI,WAAW,EAAC;IAAmB;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFrC,OAAA;MAAQkD,OAAO,EAAExB,WAAY;MAAAO,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEd,CAAC;AAACjC,EAAA,CAxEIH,QAAQ;AAAAkD,EAAA,GAARlD,QAAQ;AA0Ed,eAAeA,QAAQ;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}