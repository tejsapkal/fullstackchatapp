{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport SockJS from \"sockjs-client\";\nimport { Stomp } from \"@stomp/stompjs\";\nimport EmojiPicker from \"emoji-picker-react\";\nimport \"./ChatRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username,\n  recipient,\n  profilePic\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [darkMode, setDarkMode] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const stompClientRef = useRef(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const latestMessageRef = useRef(null);\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    const connectWebSocket = () => {\n      const socket = new SockJS(\"http://localhost:8080/chat\");\n      const client = Stomp.over(socket);\n      client.connect({}, () => {\n        console.log(\"✅ Connected to WebSocket\");\n        const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\n        client.subscribe(topic, msg => {\n          const receivedMessage = JSON.parse(msg.body);\n          setMessages(prev => [...prev, {\n            username: receivedMessage.username,\n            message: receivedMessage.message,\n            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\n            status: receivedMessage.status,\n            profilePic: receivedMessage.profilePic || null\n          }]);\n        });\n        stompClientRef.current = client;\n        setIsConnected(true);\n\n        // Fetch active users every 5 seconds\n        const intervalId = setInterval(() => {\n          fetch(\"http://localhost:8080/active-users\").then(res => res.json()).then(data => setActiveUsers(data)).catch(error => console.error(\"❌ Failed to fetch active users:\", error));\n        }, 5000);\n        return () => clearInterval(intervalId);\n      });\n    };\n    connectWebSocket();\n    return () => {\n      if (stompClientRef.current) {\n        stompClientRef.current.disconnect();\n        console.log(\"❌ Disconnected from WebSocket\");\n      }\n    };\n  }, [recipient]);\n  useEffect(() => {\n    if (latestMessageRef.current) {\n      latestMessageRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [messages]);\n\n  // 🎤 Speech Recognition Setup\n  const toggleVoiceRecording = () => {\n    if (!isRecording) {\n      if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\n        alert(\"Your browser does not support speech recognition.\");\n        return;\n      }\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.onstart = () => setIsRecording(true);\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setMessage(transcript);\n      };\n      recognition.onerror = event => console.error(\"Speech recognition error:\", event.error);\n      recognition.onend = () => setIsRecording(false);\n      recognition.start();\n      recognitionRef.current = recognition;\n    } else {\n      var _recognitionRef$curre;\n      (_recognitionRef$curre = recognitionRef.current) === null || _recognitionRef$curre === void 0 ? void 0 : _recognitionRef$curre.stop();\n      setIsRecording(false);\n    }\n  };\n  const sendMessage = () => {\n    if (stompClientRef.current && stompClientRef.current.connected) {\n      const chatMessage = {\n        username: username || \"Anonymous\",\n        message: message || \"Empty message\",\n        recipient: recipient || \"\",\n        timestamp: new Date().toLocaleTimeString(),\n        status: \"Sent\",\n        profilePic: profilePic || null\n      };\n      stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n      setMessage(\"\");\n    } else {\n      console.error(\"❌ WebSocket is not connected!\");\n      alert(\"Failed to send message. Connection not established.\");\n    }\n  };\n  const toggleTheme = () => {\n    setDarkMode(prevMode => !prevMode);\n    document.body.classList.toggle(\"dark-page\", !darkMode);\n  };\n  const handleEmojiClick = emojiObject => {\n    setMessage(prev => prev + emojiObject.emoji);\n    setShowEmojiPicker(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-container ${darkMode ? \"dark-theme\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Active Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: activeUsers.length > 0 ? activeUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 58\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"No active users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: recipient ? `Private Chat with ${recipient}` : \"Group Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"theme-toggle-btn\",\n          onClick: toggleTheme,\n          children: darkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"voice-btn\",\n          onClick: toggleVoiceRecording,\n          children: isRecording ? \"🛑 Stop Recording\" : \"🎤 Start Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: index === messages.length - 1 ? latestMessageRef : null,\n          className: `message ${msg.username === username ? \"sent\" : \"received\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profile-pic\",\n            children: msg.profilePic ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: msg.profilePic,\n              alt: \"Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"profile-initials\",\n              children: msg.username.split(\" \").map(word => word.charAt(0)).join(\"\").toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: msg.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 37\n              }, this), \": \", msg.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [msg.timestamp, \" \\u2022 \", msg.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"emoji-btn\",\n          onClick: () => setShowEmojiPicker(prev => !prev),\n          children: \"\\uD83D\\uDE0A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emoji-picker-container\",\n          children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n            onEmojiClick: handleEmojiClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          disabled: !isConnected,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"Feq+x53+CZaAK8IOrb28b4hKc+g=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","useRef","SockJS","Stomp","EmojiPicker","jsxDEV","_jsxDEV","ChatRoom","username","recipient","profilePic","_s","messages","setMessages","message","setMessage","activeUsers","setActiveUsers","darkMode","setDarkMode","showEmojiPicker","setShowEmojiPicker","isRecording","setIsRecording","stompClientRef","isConnected","setIsConnected","latestMessageRef","recognitionRef","connectWebSocket","socket","client","over","connect","console","log","topic","subscribe","msg","receivedMessage","JSON","parse","body","prev","timestamp","Date","toLocaleTimeString","status","current","intervalId","setInterval","fetch","then","res","json","data","catch","error","clearInterval","disconnect","scrollIntoView","behavior","toggleVoiceRecording","window","SpeechRecognition","webkitSpeechRecognition","alert","recognition","lang","continuous","interimResults","onstart","onresult","event","transcript","results","onerror","onend","start","_recognitionRef$curre","stop","sendMessage","connected","chatMessage","send","stringify","toggleTheme","prevMode","document","classList","toggle","handleEmojiClick","emojiObject","emoji","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","user","index","onClick","ref","src","alt","split","word","charAt","join","toUpperCase","onEmojiClick","type","value","onChange","e","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { Stomp } from \"@stomp/stompjs\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\nimport \"./ChatRoom.css\";\r\n\r\nconst ChatRoom = ({ username, recipient, profilePic }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [activeUsers, setActiveUsers] = useState([]);\r\n\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n    const [isRecording, setIsRecording] = useState(false);\r\n\r\n    const stompClientRef = useRef(null);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const latestMessageRef = useRef(null);\r\n    const recognitionRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const connectWebSocket = () => {\r\n            const socket = new SockJS(\"http://localhost:8080/chat\");\r\n            const client = Stomp.over(socket);\r\n\r\n            client.connect({}, () => {\r\n                console.log(\"✅ Connected to WebSocket\");\r\n\r\n                const topic = recipient\r\n                    ? `/topic/private/${recipient}`\r\n                    : `/topic/messages`;\r\n\r\n                client.subscribe(topic, (msg) => {\r\n                    const receivedMessage = JSON.parse(msg.body);\r\n\r\n                    setMessages((prev) => [\r\n                        ...prev,\r\n                        {\r\n                            username: receivedMessage.username,\r\n                            message: receivedMessage.message,\r\n                            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\r\n                            status: receivedMessage.status,\r\n                            profilePic: receivedMessage.profilePic || null,\r\n                        },\r\n                    ]);\r\n                });\r\n\r\n                stompClientRef.current = client;\r\n                setIsConnected(true);\r\n\r\n                // Fetch active users every 5 seconds\r\n                const intervalId = setInterval(() => {\r\n                    fetch(\"http://localhost:8080/active-users\")\r\n                        .then((res) => res.json())\r\n                        .then((data) => setActiveUsers(data))\r\n                        .catch((error) =>\r\n                            console.error(\"❌ Failed to fetch active users:\", error)\r\n                        );\r\n                }, 5000);\r\n\r\n                return () => clearInterval(intervalId);\r\n            });\r\n        };\r\n\r\n        connectWebSocket();\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.disconnect();\r\n                console.log(\"❌ Disconnected from WebSocket\");\r\n            }\r\n        };\r\n    }, [recipient]);\r\n\r\n    useEffect(() => {\r\n        if (latestMessageRef.current) {\r\n            latestMessageRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [messages]);\r\n\r\n    // 🎤 Speech Recognition Setup\r\n    const toggleVoiceRecording = () => {\r\n        if (!isRecording) {\r\n            if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\r\n                alert(\"Your browser does not support speech recognition.\");\r\n                return;\r\n            }\r\n\r\n            const SpeechRecognition =\r\n                window.SpeechRecognition || window.webkitSpeechRecognition;\r\n            const recognition = new SpeechRecognition();\r\n            recognition.lang = \"en-US\";\r\n            recognition.continuous = false;\r\n            recognition.interimResults = false;\r\n\r\n            recognition.onstart = () => setIsRecording(true);\r\n            recognition.onresult = (event) => {\r\n                const transcript = event.results[0][0].transcript;\r\n                setMessage(transcript);\r\n            };\r\n            recognition.onerror = (event) =>\r\n                console.error(\"Speech recognition error:\", event.error);\r\n            recognition.onend = () => setIsRecording(false);\r\n\r\n            recognition.start();\r\n            recognitionRef.current = recognition;\r\n        } else {\r\n            recognitionRef.current?.stop();\r\n            setIsRecording(false);\r\n        }\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        if (stompClientRef.current && stompClientRef.current.connected) {\r\n            const chatMessage = {\r\n                username: username || \"Anonymous\",\r\n                message: message || \"Empty message\",\r\n                recipient: recipient || \"\",\r\n                timestamp: new Date().toLocaleTimeString(),\r\n                status: \"Sent\",\r\n                profilePic: profilePic || null,\r\n            };\r\n\r\n            stompClientRef.current.send(\r\n                \"/app/sendMessage\",\r\n                {},\r\n                JSON.stringify(chatMessage)\r\n            );\r\n\r\n            setMessage(\"\");\r\n        } else {\r\n            console.error(\"❌ WebSocket is not connected!\");\r\n            alert(\"Failed to send message. Connection not established.\");\r\n        }\r\n    };\r\n\r\n    const toggleTheme = () => {\r\n        setDarkMode((prevMode) => !prevMode);\r\n        document.body.classList.toggle(\"dark-page\", !darkMode);\r\n    };\r\n\r\n    const handleEmojiClick = (emojiObject) => {\r\n        setMessage((prev) => prev + emojiObject.emoji);\r\n        setShowEmojiPicker(false);\r\n    };\r\n\r\n    return (\r\n        <div className={`chat-container ${darkMode ? \"dark-theme\" : \"\"}`}>\r\n            <div className=\"sidebar\">\r\n                <h3>Active Users</h3>\r\n                <ul>\r\n                    {activeUsers.length > 0 ? (\r\n                        activeUsers.map((user, index) => <li key={index}>{user}</li>)\r\n                    ) : (\r\n                        <li>No active users</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-header\">\r\n                    <h2>\r\n                        {recipient ? `Private Chat with ${recipient}` : \"Group Chat\"}\r\n                    </h2>\r\n                </div>\r\n\r\n                <div className=\"top-controls\">\r\n                    <button className=\"theme-toggle-btn\" onClick={toggleTheme}>\r\n                        {darkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\"}\r\n                    </button>\r\n\r\n                    <button className=\"voice-btn\" onClick={toggleVoiceRecording}>\r\n                        {isRecording ? \"🛑 Stop Recording\" : \"🎤 Start Recording\"}\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <div\r\n                            key={index}\r\n                            ref={index === messages.length - 1 ? latestMessageRef : null}\r\n                            className={`message ${\r\n                                msg.username === username ? \"sent\" : \"received\"\r\n                            }`}\r\n                        >\r\n                            {/* 🟢 Profile Picture or Initials */}\r\n                            <div className=\"profile-pic\">\r\n                                {msg.profilePic ? (\r\n                                    <img src={msg.profilePic} alt=\"Profile\" />\r\n                                ) : (\r\n                                    <div className=\"profile-initials\">\r\n                                        {msg.username\r\n                                            .split(\" \")\r\n                                            .map((word) => word.charAt(0))\r\n                                            .join(\"\")\r\n                                            .toUpperCase()}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                            <div className=\"message-bubble\">\r\n                                <p>\r\n                                    <strong>{msg.username}</strong>: {msg.message}\r\n                                </p>\r\n                                <small>{msg.timestamp} • {msg.status}</small>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <button\r\n                        className=\"emoji-btn\"\r\n                        onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n                    >\r\n                        😊\r\n                    </button>\r\n\r\n                    {showEmojiPicker && (\r\n                        <div className=\"emoji-picker-container\">\r\n                            <EmojiPicker onEmojiClick={handleEmojiClick} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                    />\r\n\r\n                    <button onClick={sendMessage} disabled={!isConnected}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}