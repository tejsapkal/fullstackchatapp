{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport EmojiPicker from 'emoji-picker-react';\nimport './ChatRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username,\n  recipient\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const stompClientRef = useRef(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const latestMessageRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  useEffect(() => {\n    const connectWebSocket = () => {\n      const socket = new SockJS(\"http://localhost:8080/chat\");\n      const client = Stomp.over(socket);\n      client.connect({}, () => {\n        console.log(\"✅ Connected to WebSocket\");\n        const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\n        client.subscribe(topic, msg => {\n          const receivedMessage = JSON.parse(msg.body);\n          setMessages(prev => [...prev, {\n            username: receivedMessage.username,\n            message: receivedMessage.message,\n            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\n            status: receivedMessage.status\n          }]);\n        });\n\n        // ✅ Listen for typing events\n        client.subscribe('/topic/typing', msg => {\n          const typingData = JSON.parse(msg.body);\n          if (typingData.username !== username) {\n            setIsTyping(true);\n            clearTimeout(typingTimeoutRef.current);\n            typingTimeoutRef.current = setTimeout(() => {\n              setIsTyping(false);\n            }, 3000);\n          }\n        });\n        stompClientRef.current = client;\n        setIsConnected(true);\n        const intervalId = setInterval(() => {\n          fetch(\"http://localhost:8080/active-users\").then(res => res.json()).then(data => setActiveUsers(data)).catch(error => console.error(\"❌ Failed to fetch active users:\", error));\n        }, 5000);\n        return () => clearInterval(intervalId);\n      });\n    };\n    connectWebSocket();\n    return () => {\n      if (stompClientRef.current) {\n        stompClientRef.current.disconnect();\n        console.log(\"❌ Disconnected from WebSocket\");\n      }\n    };\n  }, [recipient, username]);\n  useEffect(() => {\n    if (latestMessageRef.current) {\n      latestMessageRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [messages]);\n  const sendMessage = () => {\n    if (stompClientRef.current && stompClientRef.current.connected) {\n      const chatMessage = {\n        username: username || \"Anonymous\",\n        message: message || \"Empty message\",\n        recipient: recipient || \"\",\n        timestamp: new Date().toLocaleTimeString(),\n        status: \"Sent\"\n      };\n      stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n      setMessage(\"\");\n    } else {\n      console.error(\"❌ WebSocket is not connected!\");\n      alert(\"Failed to send message. Connection not established.\");\n    }\n  };\n  const handleTyping = () => {\n    if (stompClientRef.current && stompClientRef.current.connected) {\n      stompClientRef.current.send(\"/app/typing\", {}, JSON.stringify({\n        username\n      }));\n    }\n  };\n  const toggleTheme = () => {\n    setDarkMode(prevMode => !prevMode);\n    document.body.classList.toggle('dark-page', !darkMode);\n  };\n  const handleEmojiClick = emojiObject => {\n    setMessage(prev => prev + emojiObject.emoji);\n    setShowEmojiPicker(false);\n  };\n\n  // Function to get initials\n  const getInitials = name => {\n    return name ? name.charAt(0).toUpperCase() : \"?\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-container ${darkMode ? 'dark-theme' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Active Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: activeUsers.length > 0 ? activeUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"profile-initial\",\n            children: getInitials(user)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 33\n          }, this), user]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"No active users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: recipient ? `Private Chat with ${recipient}` : \"Group Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"theme-toggle-btn\",\n          onClick: toggleTheme,\n          children: darkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search messages...\",\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: index === messages.length - 1 ? latestMessageRef : null,\n          className: `message ${msg.username === username ? \"sent\" : \"received\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"profile-initial\",\n            children: getInitials(msg.username)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: msg.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 40\n              }, this), \": \", msg.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [msg.timestamp, \" \\u2022 \", msg.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages found...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this), isTyping && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"typing-indicator\",\n          children: \"Someone is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"emoji-btn\",\n          onClick: () => setShowEmojiPicker(prev => !prev),\n          children: \"\\uD83D\\uDE0A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emoji-picker-container\",\n          children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n            onEmojiClick: handleEmojiClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => {\n            setMessage(e.target.value);\n            handleTyping();\n          },\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          disabled: !isConnected,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"lsWcS0SYl31w8JQQfI4jNhuZC5s=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","useRef","SockJS","Stomp","EmojiPicker","jsxDEV","_jsxDEV","ChatRoom","username","recipient","_s","messages","setMessages","message","setMessage","activeUsers","setActiveUsers","searchQuery","setSearchQuery","darkMode","setDarkMode","showEmojiPicker","setShowEmojiPicker","isTyping","setIsTyping","stompClientRef","isConnected","setIsConnected","latestMessageRef","typingTimeoutRef","connectWebSocket","socket","client","over","connect","console","log","topic","subscribe","msg","receivedMessage","JSON","parse","body","prev","timestamp","Date","toLocaleTimeString","status","typingData","clearTimeout","current","setTimeout","intervalId","setInterval","fetch","then","res","json","data","catch","error","clearInterval","disconnect","scrollIntoView","behavior","sendMessage","connected","chatMessage","send","stringify","alert","handleTyping","toggleTheme","prevMode","document","classList","toggle","handleEmojiClick","emojiObject","emoji","getInitials","name","charAt","toUpperCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","user","index","onClick","type","placeholder","value","onChange","e","target","ref","onEmojiClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport EmojiPicker from 'emoji-picker-react';\r\nimport './ChatRoom.css';\r\n\r\nconst ChatRoom = ({ username, recipient }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [activeUsers, setActiveUsers] = useState([]);\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n\r\n    const stompClientRef = useRef(null);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const latestMessageRef = useRef(null);\r\n    const typingTimeoutRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const connectWebSocket = () => {\r\n            const socket = new SockJS(\"http://localhost:8080/chat\");\r\n            const client = Stomp.over(socket);\r\n\r\n            client.connect({}, () => {\r\n                console.log(\"✅ Connected to WebSocket\");\r\n\r\n                const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\r\n\r\n                client.subscribe(topic, (msg) => {\r\n                    const receivedMessage = JSON.parse(msg.body);\r\n                    setMessages((prev) => [\r\n                        ...prev,\r\n                        {\r\n                            username: receivedMessage.username,\r\n                            message: receivedMessage.message,\r\n                            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\r\n                            status: receivedMessage.status\r\n                        }\r\n                    ]);\r\n                });\r\n\r\n                // ✅ Listen for typing events\r\n                client.subscribe('/topic/typing', (msg) => {\r\n                    const typingData = JSON.parse(msg.body);\r\n                    if (typingData.username !== username) {\r\n                        setIsTyping(true);\r\n                        clearTimeout(typingTimeoutRef.current);\r\n                        typingTimeoutRef.current = setTimeout(() => {\r\n                            setIsTyping(false);\r\n                        }, 3000); \r\n                    }\r\n                });\r\n\r\n                stompClientRef.current = client;\r\n                setIsConnected(true);\r\n\r\n                const intervalId = setInterval(() => {\r\n                    fetch(\"http://localhost:8080/active-users\")\r\n                        .then((res) => res.json())\r\n                        .then((data) => setActiveUsers(data))\r\n                        .catch((error) => console.error(\"❌ Failed to fetch active users:\", error));\r\n                }, 5000);\r\n\r\n                return () => clearInterval(intervalId);\r\n            });\r\n        };\r\n\r\n        connectWebSocket();\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.disconnect();\r\n                console.log(\"❌ Disconnected from WebSocket\");\r\n            }\r\n        };\r\n    }, [recipient, username]);\r\n\r\n    useEffect(() => {\r\n        if (latestMessageRef.current) {\r\n            latestMessageRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [messages]);\r\n\r\n    const sendMessage = () => {\r\n        if (stompClientRef.current && stompClientRef.current.connected) {\r\n            const chatMessage = {\r\n                username: username || \"Anonymous\",\r\n                message: message || \"Empty message\",\r\n                recipient: recipient || \"\",\r\n                timestamp: new Date().toLocaleTimeString(),\r\n                status: \"Sent\"\r\n            };\r\n\r\n            stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\r\n            setMessage(\"\");\r\n        } else {\r\n            console.error(\"❌ WebSocket is not connected!\");\r\n            alert(\"Failed to send message. Connection not established.\");\r\n        }\r\n    };\r\n\r\n    const handleTyping = () => {\r\n        if (stompClientRef.current && stompClientRef.current.connected) {\r\n            stompClientRef.current.send(\"/app/typing\", {}, JSON.stringify({ username }));\r\n        }\r\n    };\r\n\r\n    const toggleTheme = () => {\r\n        setDarkMode((prevMode) => !prevMode);\r\n        document.body.classList.toggle('dark-page', !darkMode);\r\n    };\r\n\r\n    const handleEmojiClick = (emojiObject) => {\r\n        setMessage((prev) => prev + emojiObject.emoji);\r\n        setShowEmojiPicker(false);\r\n    };\r\n\r\n    // Function to get initials\r\n    const getInitials = (name) => {\r\n        return name ? name.charAt(0).toUpperCase() : \"?\";\r\n    };\r\n\r\n    return (\r\n        <div className={`chat-container ${darkMode ? 'dark-theme' : ''}`}>\r\n\r\n            <div className=\"sidebar\">\r\n                <h3>Active Users</h3>\r\n                <ul>\r\n                    {activeUsers.length > 0 ? (\r\n                        activeUsers.map((user, index) => (\r\n                            <li key={index}>\r\n                                <span className=\"profile-initial\">{getInitials(user)}</span>\r\n                                {user}\r\n                            </li>\r\n                        ))\r\n                    ) : (\r\n                        <li>No active users</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-header\">\r\n                    <h2>{recipient ? `Private Chat with ${recipient}` : \"Group Chat\"}</h2>\r\n                    <button className=\"theme-toggle-btn\" onClick={toggleTheme}>\r\n                        {darkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\"}\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"search-bar\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search messages...\"\r\n                        value={searchQuery}\r\n                        onChange={(e) => setSearchQuery(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"messages\">\r\n                    {messages.length > 0 ? (\r\n                        messages.map((msg, index) => (\r\n                            <div\r\n                                key={index}\r\n                                ref={index === messages.length - 1 ? latestMessageRef : null}\r\n                                className={`message ${msg.username === username ? \"sent\" : \"received\"}`}\r\n                            >\r\n                                <span className=\"profile-initial\">{getInitials(msg.username)}</span>\r\n                                <div className=\"message-bubble\">\r\n                                    <p><strong>{msg.username}</strong>: {msg.message}</p>\r\n                                    <small>{msg.timestamp} • {msg.status}</small>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <p>No messages found...</p>\r\n                    )}\r\n                    {/* ✅ Typing Indicator */}\r\n                    {isTyping && <p className=\"typing-indicator\">Someone is typing...</p>}\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <button className=\"emoji-btn\" onClick={() => setShowEmojiPicker((prev) => !prev)}>\r\n                        😊\r\n                    </button>\r\n\r\n                    {showEmojiPicker && (\r\n                        <div className=\"emoji-picker-container\">\r\n                            <EmojiPicker onEmojiClick={handleEmojiClick} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => {\r\n                            setMessage(e.target.value);\r\n                            handleTyping();\r\n                        }}\r\n                        placeholder=\"Type a message...\"\r\n                    />\r\n                    <button onClick={sendMessage} disabled={!isConnected}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}