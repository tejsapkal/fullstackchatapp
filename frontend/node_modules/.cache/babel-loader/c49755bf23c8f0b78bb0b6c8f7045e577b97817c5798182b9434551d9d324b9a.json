{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport Message from \"./Message\";\nimport \"./ChatRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient = null;\nconst ChatRoom = ({\n  username\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  useEffect(() => {\n    const connectWebSocket = () => {\n      stompClient = new Client({\n        brokerURL: \"ws://localhost:8080/chat\",\n        reconnectDelay: 5000,\n        // Reconnect every 5 seconds\n        heartbeatIncoming: 4000,\n        heartbeatOutgoing: 4000\n      });\n      stompClient.onConnect = () => {\n        console.log(\"Connected to WebSocket\");\n        stompClient.subscribe(\"/topic/messages\", message => {\n          const receivedMessage = JSON.parse(message.body);\n          setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        });\n      };\n      stompClient.onWebSocketClose = () => {\n        console.log(\"WebSocket connection closed. Reconnecting...\");\n        setTimeout(() => {\n          connectWebSocket();\n        }, 3000); // Reconnect after 3 seconds\n      };\n      stompClient.onStompError = error => {\n        console.error(\"STOMP Error:\", error);\n      };\n      stompClient.activate();\n    };\n    connectWebSocket();\n    return () => {\n      if (stompClient) {\n        stompClient.deactivate();\n      }\n    };\n  }, []);\n  const sendMessage = () => {\n    if (stompClient && stompClient.connected && newMessage.trim()) {\n      const message = {\n        sender: username,\n        content: newMessage\n      };\n      stompClient.publish({\n        destination: \"/app/chat\",\n        body: JSON.stringify(message)\n      });\n      setNewMessage(\"\");\n    } else {\n      console.error(\"STOMP connection not available.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome, \", username, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        sender: msg.sender,\n        content: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"bFuYpZWMfOU2WhBa/CyaGkj6fmk=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","Client","Message","jsxDEV","_jsxDEV","stompClient","ChatRoom","username","_s","messages","setMessages","newMessage","setNewMessage","connectWebSocket","brokerURL","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","console","log","subscribe","message","receivedMessage","JSON","parse","body","prevMessages","onWebSocketClose","setTimeout","onStompError","error","activate","deactivate","sendMessage","connected","trim","sender","content","publish","destination","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport Message from \"./Message\";\r\nimport \"./ChatRoom.css\";\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = ({ username }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const connectWebSocket = () => {\r\n            stompClient = new Client({\r\n                brokerURL: \"ws://localhost:8080/chat\",\r\n                reconnectDelay: 5000, // Reconnect every 5 seconds\r\n                heartbeatIncoming: 4000,\r\n                heartbeatOutgoing: 4000\r\n            });\r\n\r\n            stompClient.onConnect = () => {\r\n                console.log(\"Connected to WebSocket\");\r\n\r\n                stompClient.subscribe(\"/topic/messages\", (message) => {\r\n                    const receivedMessage = JSON.parse(message.body);\r\n                    setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n                });\r\n            };\r\n\r\n            stompClient.onWebSocketClose = () => {\r\n                console.log(\"WebSocket connection closed. Reconnecting...\");\r\n                setTimeout(() => {\r\n                    connectWebSocket();\r\n                }, 3000);  // Reconnect after 3 seconds\r\n            };\r\n\r\n            stompClient.onStompError = (error) => {\r\n                console.error(\"STOMP Error:\", error);\r\n            };\r\n\r\n            stompClient.activate();\r\n        };\r\n\r\n        connectWebSocket();\r\n\r\n        return () => {\r\n            if (stompClient) {\r\n                stompClient.deactivate();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const sendMessage = () => {\r\n        if (stompClient && stompClient.connected && newMessage.trim()) {\r\n            const message = {\r\n                sender: username,\r\n                content: newMessage\r\n            };\r\n\r\n            stompClient.publish({\r\n                destination: \"/app/chat\",\r\n                body: JSON.stringify(message)\r\n            });\r\n\r\n            setNewMessage(\"\");\r\n        } else {\r\n            console.error(\"STOMP connection not available.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-room\">\r\n            <h2>Welcome, {username}!</h2>\r\n            <div className=\"messages-container\">\r\n                {messages.map((msg, index) => (\r\n                    <Message key={index} sender={msg.sender} content={msg.content} />\r\n                ))}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type a message...\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}