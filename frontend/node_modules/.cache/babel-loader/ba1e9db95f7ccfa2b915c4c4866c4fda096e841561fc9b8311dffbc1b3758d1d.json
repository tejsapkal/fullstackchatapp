{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Client } from \"@stomp/stompjs\"; // âœ… Updated import\nimport SockJS from \"sockjs-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const [client, setClient] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    const socket = new SockJS(\"http://localhost:8080/ws\");\n    const stompClient = new Client({\n      webSocketFactory: () => socket,\n      reconnectDelay: 5000,\n      // Auto-reconnect after 5 seconds\n      debug: str => console.log(str)\n    });\n    stompClient.onConnect = () => {\n      console.log(\"Connected to WebSocket!\");\n      setConnected(true);\n      stompClient.subscribe(\"/topic/public\", message => {\n        const receivedMessage = JSON.parse(message.body);\n        setChatMessages(prev => [...prev, receivedMessage]);\n      });\n    };\n    stompClient.onWebSocketError = error => {\n      console.error(\"WebSocket error:\", error);\n    };\n    stompClient.onStompError = error => {\n      console.error(\"STOMP error:\", error);\n    };\n    stompClient.activate();\n    setClient(stompClient);\n    return () => {\n      if (stompClient) {\n        stompClient.deactivate();\n      }\n    };\n  }, []);\n  const sendMessage = () => {\n    if (client && connected && message.trim()) {\n      const chatMessage = {\n        sender: \"User\",\n        // Replace with dynamic username later\n        content: message,\n        timestamp: new Date().toISOString()\n      };\n      client.publish({\n        destination: \"/app/chat.sendMessage\",\n        body: JSON.stringify(chatMessage)\n      });\n      setMessage(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Chat Room \", connected ? \"ðŸŸ¢\" : \"ðŸ”´\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"vMCa0cNY8vcaUwN2YzFgXuJjGlE=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","Client","SockJS","jsxDEV","_jsxDEV","ChatRoom","_s","client","setClient","message","setMessage","chatMessages","setChatMessages","connected","setConnected","socket","stompClient","webSocketFactory","reconnectDelay","debug","str","console","log","onConnect","subscribe","receivedMessage","JSON","parse","body","prev","onWebSocketError","error","onStompError","activate","deactivate","sendMessage","trim","chatMessage","sender","content","timestamp","Date","toISOString","publish","destination","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";  // âœ… Updated import\r\nimport SockJS from \"sockjs-client\";\r\n\r\nconst ChatRoom = () => {\r\n  const [client, setClient] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [connected, setConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const socket = new SockJS(\"http://localhost:8080/ws\");\r\n    const stompClient = new Client({\r\n      webSocketFactory: () => socket,\r\n      reconnectDelay: 5000,  // Auto-reconnect after 5 seconds\r\n      debug: (str) => console.log(str),\r\n    });\r\n\r\n    stompClient.onConnect = () => {\r\n      console.log(\"Connected to WebSocket!\");\r\n      setConnected(true);\r\n\r\n      stompClient.subscribe(\"/topic/public\", (message) => {\r\n        const receivedMessage = JSON.parse(message.body);\r\n        setChatMessages((prev) => [...prev, receivedMessage]);\r\n      });\r\n    };\r\n\r\n    stompClient.onWebSocketError = (error) => {\r\n      console.error(\"WebSocket error:\", error);\r\n    };\r\n\r\n    stompClient.onStompError = (error) => {\r\n      console.error(\"STOMP error:\", error);\r\n    };\r\n\r\n    stompClient.activate();\r\n    setClient(stompClient);\r\n\r\n    return () => {\r\n      if (stompClient) {\r\n        stompClient.deactivate();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = () => {\r\n    if (client && connected && message.trim()) {\r\n      const chatMessage = {\r\n        sender: \"User\",  // Replace with dynamic username later\r\n        content: message,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      client.publish({\r\n        destination: \"/app/chat.sendMessage\",\r\n        body: JSON.stringify(chatMessage),\r\n      });\r\n\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Chat Room {connected ? \"ðŸŸ¢\" : \"ðŸ”´\"}</h2>\r\n      <div>\r\n        {chatMessages.map((msg, index) => (\r\n          <div key={index}>\r\n            <strong>{msg.sender}: </strong> {msg.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        placeholder=\"Type a message...\"\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}