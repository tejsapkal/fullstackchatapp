{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\n\n// Create a STOMP client instance using SockJS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = new SockJS('http://localhost:8080/ws'); // Replace with your backend WebSocket endpoint\n\nconst stompClient = new Client({\n  webSocketFactory: () => socket,\n  // Use SockJS as WebSocket factory\n  debug: str => console.log(str),\n  // Debug logs (optional)\n  reconnectDelay: 5000,\n  // Reconnect every 5 seconds if disconnected\n  heartbeatIncoming: 4000,\n  heartbeatOutgoing: 4000\n});\n\n// Connect and subscribe to topic\nstompClient.onConnect = frame => {\n  console.log('Connected: ' + frame);\n\n  // Subscribe to a topic (adjust topic as needed)\n  stompClient.subscribe('/topic/public', message => {\n    console.log('Received message: ', message.body);\n  });\n\n  // Example: Send a message\n  stompClient.publish({\n    destination: '/app/chat',\n    // Adjust to your backend mapping\n    body: JSON.stringify({\n      sender: 'User',\n      content: 'Hello!'\n    })\n  });\n};\n\n// Error handling\nstompClient.onStompError = frame => {\n  console.error('Broker error: ' + frame.headers['message']);\n  console.error('Details: ' + frame.body);\n};\n\n// Activate connection\nstompClient.activate();\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","useEffect","ReactDOM","App","SockJS","Client","jsxDEV","_jsxDEV","socket","stompClient","webSocketFactory","debug","str","console","log","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","subscribe","message","body","publish","destination","JSON","stringify","sender","content","onStompError","error","headers","activate","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\n\n// Create a STOMP client instance using SockJS\nconst socket = new SockJS('http://localhost:8080/ws'); // Replace with your backend WebSocket endpoint\n\nconst stompClient = new Client({\n  webSocketFactory: () => socket, // Use SockJS as WebSocket factory\n  debug: (str) => console.log(str), // Debug logs (optional)\n  reconnectDelay: 5000, // Reconnect every 5 seconds if disconnected\n  heartbeatIncoming: 4000,\n  heartbeatOutgoing: 4000,\n});\n\n// Connect and subscribe to topic\nstompClient.onConnect = (frame) => {\n  console.log('Connected: ' + frame);\n\n  // Subscribe to a topic (adjust topic as needed)\n  stompClient.subscribe('/topic/public', (message) => {\n    console.log('Received message: ', message.body);\n  });\n\n  // Example: Send a message\n  stompClient.publish({\n    destination: '/app/chat', // Adjust to your backend mapping\n    body: JSON.stringify({ sender: 'User', content: 'Hello!' }),\n  });\n};\n\n// Error handling\nstompClient.onStompError = (frame) => {\n  console.error('Broker error: ' + frame.headers['message']);\n  console.error('Details: ' + frame.body);\n};\n\n// Activate connection\nstompClient.activate();\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,MAAM,QAAQ,gBAAgB;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAG,IAAIJ,MAAM,CAAC,0BAA0B,CAAC,CAAC,CAAC;;AAEvD,MAAMK,WAAW,GAAG,IAAIJ,MAAM,CAAC;EAC7BK,gBAAgB,EAAEA,CAAA,KAAMF,MAAM;EAAE;EAChCG,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAAE;EAClCG,cAAc,EAAE,IAAI;EAAE;EACtBC,iBAAiB,EAAE,IAAI;EACvBC,iBAAiB,EAAE;AACrB,CAAC,CAAC;;AAEF;AACAR,WAAW,CAACS,SAAS,GAAIC,KAAK,IAAK;EACjCN,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGK,KAAK,CAAC;;EAElC;EACAV,WAAW,CAACW,SAAS,CAAC,eAAe,EAAGC,OAAO,IAAK;IAClDR,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEO,OAAO,CAACC,IAAI,CAAC;EACjD,CAAC,CAAC;;EAEF;EACAb,WAAW,CAACc,OAAO,CAAC;IAClBC,WAAW,EAAE,WAAW;IAAE;IAC1BF,IAAI,EAAEG,IAAI,CAACC,SAAS,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAS,CAAC;EAC5D,CAAC,CAAC;AACJ,CAAC;;AAED;AACAnB,WAAW,CAACoB,YAAY,GAAIV,KAAK,IAAK;EACpCN,OAAO,CAACiB,KAAK,CAAC,gBAAgB,GAAGX,KAAK,CAACY,OAAO,CAAC,SAAS,CAAC,CAAC;EAC1DlB,OAAO,CAACiB,KAAK,CAAC,WAAW,GAAGX,KAAK,CAACG,IAAI,CAAC;AACzC,CAAC;;AAED;AACAb,WAAW,CAACuB,QAAQ,CAAC,CAAC;AAEtB,MAAMC,IAAI,GAAG/B,QAAQ,CAACgC,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,cACT9B,OAAA,CAACP,KAAK,CAACsC,UAAU;EAAAC,QAAA,eACfhC,OAAA,CAACJ,GAAG;IAAAqC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}