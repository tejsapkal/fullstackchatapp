{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // âœ… Use a ref to prevent infinite re-renders\n  const clientRef = useRef(null);\n  useEffect(() => {\n    if (clientRef.current) return; // Prevents reconnecting on every re-render\n\n    const client = new Client({\n      brokerURL: \"ws://localhost:8080/ws\",\n      reconnectDelay: 5000 // Auto-reconnect after 5s\n    });\n    client.onConnect = () => {\n      console.log(\"Connected to WebSocket!\");\n      setIsConnected(true);\n      client.subscribe(\"/topic/public\", msg => {\n        const receivedMessage = JSON.parse(msg.body);\n        setChatMessages(prevMessages => [...prevMessages, receivedMessage]);\n      });\n      setStompClient(client);\n    };\n    client.onStompError = frame => {\n      console.error(\"Broker reported error: \" + frame.headers[\"message\"]);\n      console.error(\"Additional details: \" + frame.body);\n    };\n    client.activate();\n    clientRef.current = client; // Store the client in the ref\n\n    return () => {\n      client.deactivate();\n    };\n  }, []); // âœ… Only run once on mount\n\n  const sendMessage = () => {\n    if (stompClient && isConnected && message.trim()) {\n      const chatMessage = {\n        sender: \"User\",\n        content: message,\n        timestamp: new Date().toISOString()\n      };\n      stompClient.publish({\n        destination: \"/app/chat.sendMessage\",\n        body: JSON.stringify(chatMessage)\n      });\n      setMessage(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Chat Room \", isConnected ? \"ðŸŸ¢\" : \"ðŸ”´\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"MK42C3e7ao3Y0bwrB2pYJ36HbEg=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Client","jsxDEV","_jsxDEV","ChatRoom","_s","stompClient","setStompClient","message","setMessage","chatMessages","setChatMessages","isConnected","setIsConnected","clientRef","current","client","brokerURL","reconnectDelay","onConnect","console","log","subscribe","msg","receivedMessage","JSON","parse","body","prevMessages","onStompError","frame","error","headers","activate","deactivate","sendMessage","trim","chatMessage","sender","content","timestamp","Date","toISOString","publish","destination","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";\r\n\r\nconst ChatRoom = () => {\r\n  const [stompClient, setStompClient] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  \r\n  // âœ… Use a ref to prevent infinite re-renders\r\n  const clientRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (clientRef.current) return; // Prevents reconnecting on every re-render\r\n\r\n    const client = new Client({\r\n      brokerURL: \"ws://localhost:8080/ws\",\r\n      reconnectDelay: 5000, // Auto-reconnect after 5s\r\n    });\r\n\r\n    client.onConnect = () => {\r\n      console.log(\"Connected to WebSocket!\");\r\n      setIsConnected(true);\r\n\r\n      client.subscribe(\"/topic/public\", (msg) => {\r\n        const receivedMessage = JSON.parse(msg.body);\r\n        setChatMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n      });\r\n\r\n      setStompClient(client);\r\n    };\r\n\r\n    client.onStompError = (frame) => {\r\n      console.error(\"Broker reported error: \" + frame.headers[\"message\"]);\r\n      console.error(\"Additional details: \" + frame.body);\r\n    };\r\n\r\n    client.activate();\r\n    clientRef.current = client;  // Store the client in the ref\r\n\r\n    return () => {\r\n      client.deactivate();\r\n    };\r\n  }, []);  // âœ… Only run once on mount\r\n\r\n  const sendMessage = () => {\r\n    if (stompClient && isConnected && message.trim()) {\r\n      const chatMessage = {\r\n        sender: \"User\",\r\n        content: message,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      stompClient.publish({\r\n        destination: \"/app/chat.sendMessage\",\r\n        body: JSON.stringify(chatMessage),\r\n      });\r\n\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Chat Room {isConnected ? \"ðŸŸ¢\" : \"ðŸ”´\"}</h2>\r\n      <div>\r\n        {chatMessages.map((msg, index) => (\r\n          <div key={index}>\r\n            <strong>{msg.sender}: </strong> {msg.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        placeholder=\"Type a message...\"\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}