{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\GroupChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Client } from '@stomp/stompjs';\nimport './GroupChat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroupChat = () => {\n  _s();\n  const {\n    username\n  } = useParams();\n  const [client, setClient] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [isConnected, setIsConnected] = useState(false); // âœ… Track connection status\n\n  useEffect(() => {\n    const stompClient = new Client({\n      brokerURL: 'ws://localhost:8080/ws',\n      reconnectDelay: 5000,\n      // âœ… Auto-reconnect every 5 seconds\n      onConnect: () => {\n        console.log('Connected to WebSocket');\n        setIsConnected(true); // âœ… Set connection status to true\n\n        // Subscribe to group chat messages\n        stompClient.subscribe('/topic/group', msg => {\n          const newMessage = JSON.parse(msg.body);\n          setMessages(prev => [...prev, newMessage]);\n        });\n\n        // Send join notification\n        stompClient.publish({\n          destination: '/app/join',\n          body: username\n        });\n      },\n      onDisconnect: () => {\n        console.log('Disconnected');\n        setIsConnected(false); // âœ… Set connection status to false\n      },\n      onStompError: frame => {\n        console.error('Broker reported error:', frame.headers['message']);\n      },\n      onWebSocketError: error => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      }\n    });\n    stompClient.activate();\n    setClient(stompClient);\n    return () => {\n      stompClient.deactivate();\n    };\n  }, [username]);\n\n  // âœ… Send message only if connected\n  const sendMessage = () => {\n    if (client && isConnected && message.trim() !== '') {\n      // âœ… Check if connected\n      const msg = {\n        sender: username,\n        content: message,\n        timestamp: new Date().toISOString()\n      };\n      client.publish({\n        destination: '/app/send',\n        body: JSON.stringify(msg)\n      });\n      setMessage('');\n    } else {\n      console.error('STOMP connection not established');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDD25 Group Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), \" \", msg.content, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timestamp\",\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        disabled: !isConnected // âœ… Disable input if not connected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: !isConnected,\n        children: isConnected ? 'Send' : 'Connecting...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(GroupChat, \"4+84yhJdpIkavWw4aeWT1rq8Ncw=\", false, function () {\n  return [useParams];\n});\n_c = GroupChat;\nexport default GroupChat;\nvar _c;\n$RefreshReg$(_c, \"GroupChat\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Client","jsxDEV","_jsxDEV","GroupChat","_s","username","client","setClient","messages","setMessages","message","setMessage","isConnected","setIsConnected","stompClient","brokerURL","reconnectDelay","onConnect","console","log","subscribe","msg","newMessage","JSON","parse","body","prev","publish","destination","onDisconnect","onStompError","frame","error","headers","onWebSocketError","activate","deactivate","sendMessage","trim","sender","content","timestamp","Date","toISOString","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","toLocaleTimeString","type","value","onChange","e","target","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/GroupChat.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Client } from '@stomp/stompjs';\r\nimport './GroupChat.css';\r\n\r\nconst GroupChat = () => {\r\n    const { username } = useParams();\r\n    const [client, setClient] = useState(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [isConnected, setIsConnected] = useState(false);    // âœ… Track connection status\r\n\r\n    useEffect(() => {\r\n        const stompClient = new Client({\r\n            brokerURL: 'ws://localhost:8080/ws',\r\n            reconnectDelay: 5000,  // âœ… Auto-reconnect every 5 seconds\r\n            onConnect: () => {\r\n                console.log('Connected to WebSocket');\r\n                setIsConnected(true);   // âœ… Set connection status to true\r\n\r\n                // Subscribe to group chat messages\r\n                stompClient.subscribe('/topic/group', (msg) => {\r\n                    const newMessage = JSON.parse(msg.body);\r\n                    setMessages((prev) => [...prev, newMessage]);\r\n                });\r\n\r\n                // Send join notification\r\n                stompClient.publish({\r\n                    destination: '/app/join',\r\n                    body: username,\r\n                });\r\n            },\r\n            onDisconnect: () => {\r\n                console.log('Disconnected');\r\n                setIsConnected(false);  // âœ… Set connection status to false\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error('Broker reported error:', frame.headers['message']);\r\n            },\r\n            onWebSocketError: (error) => {\r\n                console.error('WebSocket error:', error);\r\n                setIsConnected(false);\r\n            }\r\n        });\r\n\r\n        stompClient.activate();\r\n        setClient(stompClient);\r\n\r\n        return () => {\r\n            stompClient.deactivate();\r\n        };\r\n    }, [username]);\r\n\r\n    // âœ… Send message only if connected\r\n    const sendMessage = () => {\r\n        if (client && isConnected && message.trim() !== '') {   // âœ… Check if connected\r\n            const msg = {\r\n                sender: username,\r\n                content: message,\r\n                timestamp: new Date().toISOString()\r\n            };\r\n\r\n            client.publish({\r\n                destination: '/app/send',\r\n                body: JSON.stringify(msg),\r\n            });\r\n\r\n            setMessage('');\r\n        } else {\r\n            console.error('STOMP connection not established');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <h1>ðŸ”¥ Group Chat</h1>\r\n            \r\n            <div className=\"messages-container\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className=\"message\">\r\n                        <strong>{msg.sender}:</strong> {msg.content}\r\n                        <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                    disabled={!isConnected}   // âœ… Disable input if not connected\r\n                />\r\n                <button onClick={sendMessage} disabled={!isConnected}>\r\n                    {isConnected ? 'Send' : 'Connecting...'}  \r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GroupChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}