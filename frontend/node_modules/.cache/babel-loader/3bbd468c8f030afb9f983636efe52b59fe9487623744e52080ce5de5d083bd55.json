{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nlet stompClient = null; // Global stomp client to be reused after connection\n\nexport const connectWebSocket = onMessageReceived => {\n  const socket = new SockJS('http://localhost:8080/chat'); // Match your backend endpoint\n\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    debug: str => console.log(str),\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n    onConnect: frame => {\n      console.log('Connected: ' + frame);\n\n      // Subscribe to topic\n      stompClient.subscribe('/topic/public', message => {\n        console.log('Received: ', message.body);\n        onMessageReceived(JSON.parse(message.body)); // Parse and pass message to App.js\n      });\n    },\n    onStompError: frame => {\n      console.error('Broker error: ' + frame.headers['message']);\n      console.error('Details: ' + frame.body);\n    }\n  });\n  stompClient.activate(); // Connect!\n};\n\n// ✅ Safe send function that checks connection first\nexport const sendMessage = message => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: '/app/chat',\n      body: JSON.stringify(message)\n    });\n  } else {\n    console.error('❌ STOMP client is not connected. Cannot send message.');\n  }\n};","map":{"version":3,"names":["SockJS","Client","stompClient","connectWebSocket","onMessageReceived","socket","webSocketFactory","debug","str","console","log","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","subscribe","message","body","JSON","parse","onStompError","error","headers","activate","sendMessage","connected","publish","destination","stringify"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/WebSocketService.js"],"sourcesContent":["import SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nlet stompClient = null; // Global stomp client to be reused after connection\r\n\r\nexport const connectWebSocket = (onMessageReceived) => {\r\n  const socket = new SockJS('http://localhost:8080/chat'); // Match your backend endpoint\r\n\r\n  stompClient = new Client({\r\n    webSocketFactory: () => socket,\r\n    debug: (str) => console.log(str),\r\n    reconnectDelay: 5000,\r\n    heartbeatIncoming: 4000,\r\n    heartbeatOutgoing: 4000,\r\n    onConnect: (frame) => {\r\n      console.log('Connected: ' + frame);\r\n\r\n      // Subscribe to topic\r\n      stompClient.subscribe('/topic/public', (message) => {\r\n        console.log('Received: ', message.body);\r\n        onMessageReceived(JSON.parse(message.body)); // Parse and pass message to App.js\r\n      });\r\n    },\r\n    onStompError: (frame) => {\r\n      console.error('Broker error: ' + frame.headers['message']);\r\n      console.error('Details: ' + frame.body);\r\n    }\r\n  });\r\n\r\n  stompClient.activate(); // Connect!\r\n};\r\n\r\n// ✅ Safe send function that checks connection first\r\nexport const sendMessage = (message) => {\r\n  if (stompClient && stompClient.connected) {\r\n    stompClient.publish({\r\n      destination: '/app/chat',\r\n      body: JSON.stringify(message)\r\n    });\r\n  } else {\r\n    console.error('❌ STOMP client is not connected. Cannot send message.');\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,eAAe;AAClC,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,IAAIC,WAAW,GAAG,IAAI,CAAC,CAAC;;AAExB,OAAO,MAAMC,gBAAgB,GAAIC,iBAAiB,IAAK;EACrD,MAAMC,MAAM,GAAG,IAAIL,MAAM,CAAC,4BAA4B,CAAC,CAAC,CAAC;;EAEzDE,WAAW,GAAG,IAAID,MAAM,CAAC;IACvBK,gBAAgB,EAAEA,CAAA,KAAMD,MAAM;IAC9BE,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChCG,cAAc,EAAE,IAAI;IACpBC,iBAAiB,EAAE,IAAI;IACvBC,iBAAiB,EAAE,IAAI;IACvBC,SAAS,EAAGC,KAAK,IAAK;MACpBN,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGK,KAAK,CAAC;;MAElC;MACAb,WAAW,CAACc,SAAS,CAAC,eAAe,EAAGC,OAAO,IAAK;QAClDR,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEO,OAAO,CAACC,IAAI,CAAC;QACvCd,iBAAiB,CAACe,IAAI,CAACC,KAAK,CAACH,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MAC/C,CAAC,CAAC;IACJ,CAAC;IACDG,YAAY,EAAGN,KAAK,IAAK;MACvBN,OAAO,CAACa,KAAK,CAAC,gBAAgB,GAAGP,KAAK,CAACQ,OAAO,CAAC,SAAS,CAAC,CAAC;MAC1Dd,OAAO,CAACa,KAAK,CAAC,WAAW,GAAGP,KAAK,CAACG,IAAI,CAAC;IACzC;EACF,CAAC,CAAC;EAEFhB,WAAW,CAACsB,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAIR,OAAO,IAAK;EACtC,IAAIf,WAAW,IAAIA,WAAW,CAACwB,SAAS,EAAE;IACxCxB,WAAW,CAACyB,OAAO,CAAC;MAClBC,WAAW,EAAE,WAAW;MACxBV,IAAI,EAAEC,IAAI,CAACU,SAAS,CAACZ,OAAO;IAC9B,CAAC,CAAC;EACJ,CAAC,MAAM;IACLR,OAAO,CAACa,KAAK,CAAC,uDAAuD,CAAC;EACxE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}