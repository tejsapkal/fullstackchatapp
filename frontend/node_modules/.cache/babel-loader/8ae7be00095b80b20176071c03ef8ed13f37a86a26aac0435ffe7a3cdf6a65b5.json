{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\PrivateChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Client } from '@stomp/stompjs';\nimport './PrivateChat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateChat = () => {\n  _s();\n  const {\n    username,\n    recipient\n  } = useParams();\n  const [client, setClient] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [messages, setMessages] = useState([]); // ✅ Initialize as empty array\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/chat/private/${username}/${recipient}`, {\n          mode: 'cors'\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to fetch messages: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Fetched messages:\", data);\n\n        // ✅ Ensure messages is always an array\n        setMessages(Array.isArray(data) ? data : []);\n      } catch (error) {\n        console.error('Error fetching private messages:', error);\n        setMessages([]); // ✅ Fallback to empty array on error\n      }\n    };\n    fetchMessages();\n    const newClient = new Client({\n      brokerURL: 'ws://localhost:8080/ws',\n      reconnectDelay: 5000,\n      onConnect: () => {\n        console.log('🔥 Connected to WebSocket');\n        setConnected(true);\n\n        // ✅ Subscribe to private chat between the two users\n        newClient.subscribe(`/user/${username}/queue/messages`, message => {\n          const newMessage = JSON.parse(message.body);\n          setMessages(prev => [...prev, newMessage]);\n        });\n      },\n      onDisconnect: () => {\n        console.log('❌ Disconnected from WebSocket');\n        setConnected(false);\n      },\n      onStompError: frame => {\n        console.error('❌ STOMP Error:', frame);\n      }\n    });\n    newClient.activate();\n    setClient(newClient);\n    return () => {\n      newClient.deactivate();\n    };\n  }, [username, recipient]);\n  const sendMessage = () => {\n    if (!client || !connected) {\n      console.error('❌ WebSocket is not connected.');\n      alert('WebSocket connection is not active. Please wait...');\n      return;\n    }\n    if (message.trim()) {\n      const msg = {\n        sender: username,\n        recipient: recipient,\n        content: message\n      };\n      client.publish({\n        destination: '/app/chat.private',\n        body: JSON.stringify(msg)\n      });\n      setMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"private-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\uD83D\\uDD25 Private Chat with \", recipient]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: Array.isArray(messages) && messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender === username ? 'sent' : 'received'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No messages yet. Start a conversation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: !connected,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(PrivateChat, \"B0ApiLPxwyYv04m+b9NaoY34Ms8=\", false, function () {\n  return [useParams];\n});\n_c = PrivateChat;\nexport default PrivateChat;\nvar _c;\n$RefreshReg$(_c, \"PrivateChat\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Client","jsxDEV","_jsxDEV","PrivateChat","_s","username","recipient","client","setClient","connected","setConnected","messages","setMessages","message","setMessage","fetchMessages","response","fetch","mode","ok","Error","status","data","json","console","log","Array","isArray","error","newClient","brokerURL","reconnectDelay","onConnect","subscribe","newMessage","JSON","parse","body","prev","onDisconnect","onStompError","frame","activate","deactivate","sendMessage","alert","trim","msg","sender","content","publish","destination","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","type","placeholder","value","onChange","e","target","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/PrivateChat.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Client } from '@stomp/stompjs';\r\nimport './PrivateChat.css';\r\n\r\nconst PrivateChat = () => {\r\n    const { username, recipient } = useParams();\r\n    const [client, setClient] = useState(null);\r\n    const [connected, setConnected] = useState(false);\r\n    const [messages, setMessages] = useState([]);   // ✅ Initialize as empty array\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:8080/api/chat/private/${username}/${recipient}`, {\r\n                    mode: 'cors'\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Failed to fetch messages: ${response.status}`);\r\n                }\r\n\r\n                const data = await response.json();\r\n                console.log(\"Fetched messages:\", data);\r\n\r\n                // ✅ Ensure messages is always an array\r\n                setMessages(Array.isArray(data) ? data : []);  \r\n\r\n            } catch (error) {\r\n                console.error('Error fetching private messages:', error);\r\n                setMessages([]);   // ✅ Fallback to empty array on error\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n\r\n        const newClient = new Client({\r\n            brokerURL: 'ws://localhost:8080/ws',\r\n            reconnectDelay: 5000, \r\n            onConnect: () => {\r\n                console.log('🔥 Connected to WebSocket');\r\n                setConnected(true);\r\n\r\n                // ✅ Subscribe to private chat between the two users\r\n                newClient.subscribe(`/user/${username}/queue/messages`, (message) => {\r\n                    const newMessage = JSON.parse(message.body);\r\n                    setMessages((prev) => [...prev, newMessage]);\r\n                });\r\n            },\r\n            onDisconnect: () => {\r\n                console.log('❌ Disconnected from WebSocket');\r\n                setConnected(false);\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error('❌ STOMP Error:', frame);\r\n            }\r\n        });\r\n\r\n        newClient.activate();\r\n        setClient(newClient);\r\n\r\n        return () => {\r\n            newClient.deactivate();\r\n        };\r\n    }, [username, recipient]);\r\n\r\n    const sendMessage = () => {\r\n        if (!client || !connected) {\r\n            console.error('❌ WebSocket is not connected.');\r\n            alert('WebSocket connection is not active. Please wait...');\r\n            return;\r\n        }\r\n\r\n        if (message.trim()) {\r\n            const msg = {\r\n                sender: username,\r\n                recipient: recipient,\r\n                content: message\r\n            };\r\n\r\n            client.publish({\r\n                destination: '/app/chat.private',\r\n                body: JSON.stringify(msg)\r\n            });\r\n\r\n            setMessage('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"private-chat-container\">\r\n            <h2>🔥 Private Chat with {recipient}</h2>\r\n\r\n            <div className=\"chat-box\">\r\n                {Array.isArray(messages) && messages.length > 0 ? (\r\n                    messages.map((msg, index) => (\r\n                        <div key={index} className={`message ${msg.sender === username ? 'sent' : 'received'}`}>\r\n                            <strong>{msg.sender}:</strong> {msg.content}\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p>No messages yet. Start a conversation!</p>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"chat-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type a message...\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                />\r\n                <button onClick={sendMessage} disabled={!connected}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrivateChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}