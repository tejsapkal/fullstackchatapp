{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport Message from \"./Message\";\nimport \"./ChatRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient = null;\nlet reconnectAttempts = 0; // ✅ Track reconnect attempts\nconst MAX_RECONNECT_ATTEMPTS = 5; // ✅ Limit reconnections\n\nconst ChatRoom = ({\n  username\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  useEffect(() => {\n    const connectWebSocket = () => {\n      if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {\n        console.error(\"Max reconnection attempts reached.\");\n        return; // Stop trying after max attempts\n      }\n      stompClient = new Client({\n        brokerURL: \"ws://localhost:8080/chat\",\n        reconnectDelay: 5000,\n        heartbeatIncoming: 4000,\n        heartbeatOutgoing: 4000\n      });\n      stompClient.onConnect = () => {\n        console.log(\"Connected to WebSocket\");\n        reconnectAttempts = 0; // ✅ Reset attempts on successful connection\n\n        stompClient.subscribe(\"/topic/messages\", message => {\n          const receivedMessage = JSON.parse(message.body);\n          setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        });\n      };\n      stompClient.onWebSocketClose = () => {\n        console.log(\"WebSocket connection closed. Reconnecting...\");\n        reconnectAttempts++; // ✅ Increment attempts\n        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n          setTimeout(() => {\n            connectWebSocket();\n          }, 3000); // Retry after 3 seconds\n        }\n      };\n      stompClient.onStompError = error => {\n        console.error(\"STOMP Error:\", error);\n      };\n      stompClient.activate();\n    };\n    connectWebSocket();\n    return () => {\n      if (stompClient) {\n        stompClient.deactivate();\n      }\n    };\n  }, []);\n  const sendMessage = () => {\n    if (stompClient && stompClient.connected && newMessage.trim()) {\n      const message = {\n        sender: username,\n        content: newMessage\n      };\n      stompClient.publish({\n        destination: \"/app/chat\",\n        body: JSON.stringify(message)\n      });\n      setNewMessage(\"\");\n    } else {\n      console.error(\"STOMP connection not available.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome, \", username, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        sender: msg.sender,\n        content: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"bFuYpZWMfOU2WhBa/CyaGkj6fmk=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","Client","Message","jsxDEV","_jsxDEV","stompClient","reconnectAttempts","MAX_RECONNECT_ATTEMPTS","ChatRoom","username","_s","messages","setMessages","newMessage","setNewMessage","connectWebSocket","console","error","brokerURL","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","log","subscribe","message","receivedMessage","JSON","parse","body","prevMessages","onWebSocketClose","setTimeout","onStompError","activate","deactivate","sendMessage","connected","trim","sender","content","publish","destination","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport Message from \"./Message\";\r\nimport \"./ChatRoom.css\";\r\n\r\nlet stompClient = null;\r\nlet reconnectAttempts = 0;  // ✅ Track reconnect attempts\r\nconst MAX_RECONNECT_ATTEMPTS = 5;  // ✅ Limit reconnections\r\n\r\nconst ChatRoom = ({ username }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const connectWebSocket = () => {\r\n            if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {\r\n                console.error(\"Max reconnection attempts reached.\");\r\n                return;  // Stop trying after max attempts\r\n            }\r\n\r\n            stompClient = new Client({\r\n                brokerURL: \"ws://localhost:8080/chat\",\r\n                reconnectDelay: 5000,\r\n                heartbeatIncoming: 4000,\r\n                heartbeatOutgoing: 4000\r\n            });\r\n\r\n            stompClient.onConnect = () => {\r\n                console.log(\"Connected to WebSocket\");\r\n                reconnectAttempts = 0;  // ✅ Reset attempts on successful connection\r\n\r\n                stompClient.subscribe(\"/topic/messages\", (message) => {\r\n                    const receivedMessage = JSON.parse(message.body);\r\n                    setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n                });\r\n            };\r\n\r\n            stompClient.onWebSocketClose = () => {\r\n                console.log(\"WebSocket connection closed. Reconnecting...\");\r\n                reconnectAttempts++;  // ✅ Increment attempts\r\n                if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\r\n                    setTimeout(() => {\r\n                        connectWebSocket();\r\n                    }, 3000);  // Retry after 3 seconds\r\n                }\r\n            };\r\n\r\n            stompClient.onStompError = (error) => {\r\n                console.error(\"STOMP Error:\", error);\r\n            };\r\n\r\n            stompClient.activate();\r\n        };\r\n\r\n        connectWebSocket();\r\n\r\n        return () => {\r\n            if (stompClient) {\r\n                stompClient.deactivate();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const sendMessage = () => {\r\n        if (stompClient && stompClient.connected && newMessage.trim()) {\r\n            const message = {\r\n                sender: username,\r\n                content: newMessage\r\n            };\r\n\r\n            stompClient.publish({\r\n                destination: \"/app/chat\",\r\n                body: JSON.stringify(message)\r\n            });\r\n\r\n            setNewMessage(\"\");\r\n        } else {\r\n            console.error(\"STOMP connection not available.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-room\">\r\n            <h2>Welcome, {username}!</h2>\r\n            <div className=\"messages-container\">\r\n                {messages.map((msg, index) => (\r\n                    <Message key={index} sender={msg.sender} content={msg.content} />\r\n                ))}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type a message...\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}