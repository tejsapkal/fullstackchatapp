{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport SockJS from \"sockjs-client\";\nimport { over } from \"stompjs\";\nimport Message from \"./Message\";\nimport \"./ChatRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient = null;\nconst ChatRoom = ({\n  username\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  useEffect(() => {\n    const socket = new SockJS(\"http://localhost:8080/chat\");\n    stompClient = over(socket);\n    stompClient.connect({}, () => {\n      stompClient.subscribe(\"/topic/messages\", message => {\n        const receivedMessage = JSON.parse(message.body);\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\n      });\n    });\n    return () => {\n      if (stompClient) {\n        stompClient.disconnect();\n      }\n    };\n  }, []);\n  const sendMessage = () => {\n    if (stompClient && newMessage.trim()) {\n      const message = {\n        sender: username,\n        content: newMessage\n      };\n      stompClient.send(\"/app/chat\", {}, JSON.stringify(message));\n      setNewMessage(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome, \", username, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        sender: msg.sender,\n        content: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"bFuYpZWMfOU2WhBa/CyaGkj6fmk=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","SockJS","over","Message","jsxDEV","_jsxDEV","stompClient","ChatRoom","username","_s","messages","setMessages","newMessage","setNewMessage","socket","connect","subscribe","message","receivedMessage","JSON","parse","body","prevMessages","disconnect","sendMessage","trim","sender","content","send","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { over } from \"stompjs\";\r\nimport Message from \"./Message\";\r\nimport \"./ChatRoom.css\";\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = ({ username }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const socket = new SockJS(\"http://localhost:8080/chat\");\r\n        stompClient = over(socket);\r\n\r\n        stompClient.connect({}, () => {\r\n            stompClient.subscribe(\"/topic/messages\", (message) => {\r\n                const receivedMessage = JSON.parse(message.body);\r\n                setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n            });\r\n        });\r\n\r\n        return () => {\r\n            if (stompClient) {\r\n                stompClient.disconnect();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const sendMessage = () => {\r\n        if (stompClient && newMessage.trim()) {\r\n            const message = {\r\n                sender: username,\r\n                content: newMessage\r\n            };\r\n            stompClient.send(\"/app/chat\", {}, JSON.stringify(message));\r\n            setNewMessage(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-room\">\r\n            <h2>Welcome, {username}!</h2>\r\n            <div className=\"messages-container\">\r\n                {messages.map((msg, index) => (\r\n                    <Message key={index} sender={msg.sender} content={msg.content} />\r\n                ))}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type a message...\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,IAAI,QAAQ,SAAS;AAC9B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,IAAIC,WAAW,GAAG,IAAI;AAEtB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACZ,MAAMc,MAAM,GAAG,IAAIb,MAAM,CAAC,4BAA4B,CAAC;IACvDK,WAAW,GAAGJ,IAAI,CAACY,MAAM,CAAC;IAE1BR,WAAW,CAACS,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;MAC1BT,WAAW,CAACU,SAAS,CAAC,iBAAiB,EAAGC,OAAO,IAAK;QAClD,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;QAChDV,WAAW,CAAEW,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEJ,eAAe,CAAC,CAAC;MACrE,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAO,MAAM;MACT,IAAIZ,WAAW,EAAE;QACbA,WAAW,CAACiB,UAAU,CAAC,CAAC;MAC5B;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIlB,WAAW,IAAIM,UAAU,CAACa,IAAI,CAAC,CAAC,EAAE;MAClC,MAAMR,OAAO,GAAG;QACZS,MAAM,EAAElB,QAAQ;QAChBmB,OAAO,EAAEf;MACb,CAAC;MACDN,WAAW,CAACsB,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAAET,IAAI,CAACU,SAAS,CAACZ,OAAO,CAAC,CAAC;MAC1DJ,aAAa,CAAC,EAAE,CAAC;IACrB;EACJ,CAAC;EAED,oBACIR,OAAA;IAAKyB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtB1B,OAAA;MAAA0B,QAAA,GAAI,WAAS,EAACvB,QAAQ,EAAC,GAAC;IAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7B9B,OAAA;MAAKyB,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAC9BrB,QAAQ,CAAC0B,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACrBjC,OAAA,CAACF,OAAO;QAAauB,MAAM,EAAEW,GAAG,CAACX,MAAO;QAACC,OAAO,EAAEU,GAAG,CAACV;MAAQ,GAAhDW,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA6C,CACnE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACN9B,OAAA;MAAKyB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5B1B,OAAA;QACIkC,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,mBAAmB;QAC/BC,KAAK,EAAE7B,UAAW;QAClB8B,QAAQ,EAAGC,CAAC,IAAK9B,aAAa,CAAC8B,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,eACF9B,OAAA;QAAQwC,OAAO,EAAErB,WAAY;QAAAO,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC1B,EAAA,CApDIF,QAAQ;AAAAuC,EAAA,GAARvC,QAAQ;AAsDd,eAAeA,QAAQ;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}