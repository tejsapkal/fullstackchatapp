{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { over } from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  useEffect(() => {\n    const socket = new SockJS(\"http://localhost:8080/ws\");\n    const client = over(socket);\n    client.connect({}, () => {\n      console.log(\"Connected to WebSocket!\");\n\n      // Subscribe all users to the same public topic\n      client.subscribe(\"/topic/public\", msg => {\n        const receivedMessage = JSON.parse(msg.body);\n        setChatMessages(prevMessages => [...prevMessages, receivedMessage]);\n      });\n      setStompClient(client);\n    });\n    return () => {\n      if (stompClient) {\n        stompClient.disconnect();\n      }\n    };\n  }, []);\n  const sendMessage = () => {\n    if (stompClient && message.trim()) {\n      const chatMessage = {\n        sender: \"User\",\n        // Replace with dynamic username later\n        content: message,\n        timestamp: new Date().toISOString()\n      };\n      stompClient.send(\"/app/chat.sendMessage\", {}, JSON.stringify(chatMessage));\n      setMessage(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"Kw7IMQOn2+NGmpZWbkZf/FWLc9s=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","over","SockJS","jsxDEV","_jsxDEV","ChatRoom","_s","stompClient","setStompClient","message","setMessage","chatMessages","setChatMessages","socket","client","connect","console","log","subscribe","msg","receivedMessage","JSON","parse","body","prevMessages","disconnect","sendMessage","trim","chatMessage","sender","content","timestamp","Date","toISOString","send","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { over } from \"stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\n\r\nconst ChatRoom = () => {\r\n  const [stompClient, setStompClient] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const socket = new SockJS(\"http://localhost:8080/ws\");\r\n    const client = over(socket);\r\n\r\n    client.connect({}, () => {\r\n      console.log(\"Connected to WebSocket!\");\r\n\r\n      // Subscribe all users to the same public topic\r\n      client.subscribe(\"/topic/public\", (msg) => {\r\n        const receivedMessage = JSON.parse(msg.body);\r\n        setChatMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n      });\r\n\r\n      setStompClient(client);\r\n    });\r\n\r\n    return () => {\r\n      if (stompClient) {\r\n        stompClient.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = () => {\r\n    if (stompClient && message.trim()) {\r\n      const chatMessage = {\r\n        sender: \"User\",  // Replace with dynamic username later\r\n        content: message,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      stompClient.send(\"/app/chat.sendMessage\", {}, JSON.stringify(chatMessage));\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Chat Room</h2>\r\n      <div>\r\n        {chatMessages.map((msg, index) => (\r\n          <div key={index}>\r\n            <strong>{msg.sender}: </strong> {msg.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        placeholder=\"Type a message...\"\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}