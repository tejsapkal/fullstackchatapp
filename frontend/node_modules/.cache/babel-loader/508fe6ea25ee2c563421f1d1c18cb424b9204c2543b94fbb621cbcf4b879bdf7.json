{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport EmojiPicker from 'emoji-picker-react';\nimport './ChatRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username,\n  recipient,\n  setRecipient\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [darkMode, setDarkMode] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const stompClientRef = useRef(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const latestMessageRef = useRef(null);\n  useEffect(() => {\n    const connectWebSocket = () => {\n      const socket = new SockJS(\"http://localhost:8080/chat\");\n      const client = Stomp.over(socket);\n      client.connect({}, () => {\n        console.log(\"Connected to WebSocket\");\n        const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\n        client.subscribe(topic, msg => {\n          const receivedMessage = JSON.parse(msg.body);\n          setMessages(prev => [...prev, {\n            username: receivedMessage.username,\n            message: receivedMessage.message,\n            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\n            status: receivedMessage.status\n          }]);\n        });\n        stompClientRef.current = client;\n        setIsConnected(true);\n        const intervalId = setInterval(() => {\n          fetch(\"http://localhost:8080/active-users\").then(res => res.json()).then(data => setActiveUsers(data)).catch(error => console.error(\"❌ Failed to fetch active users:\", error));\n        }, 5000);\n        return () => clearInterval(intervalId);\n      });\n    };\n    connectWebSocket();\n    return () => {\n      if (stompClientRef.current) {\n        stompClientRef.current.disconnect();\n        console.log(\"❌ Disconnected from WebSocket\");\n      }\n    };\n  }, [recipient]);\n  useEffect(() => {\n    if (latestMessageRef.current) {\n      latestMessageRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [messages]);\n  const handleUserClick = selectedUser => {\n    if (selectedUser !== username) {\n      setRecipient(selectedUser);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-container ${darkMode ? 'dark-theme' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Active Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: activeUsers.length > 0 ? activeUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"user-item\",\n          onClick: () => handleUserClick(user),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://i.pravatar.cc/40?u=${user}`,\n            alt: \"avatar\",\n            className: \"avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"user-name\",\n            children: user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-indicator online\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"No active users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: recipient ? `Private Chat with ${recipient}` : \"Group Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: index === messages.length - 1 ? latestMessageRef : null,\n          className: `message ${msg.username === username ? \"sent\" : \"received\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profile-initials\",\n            children: msg.username.charAt(0).toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: msg.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 36\n              }, this), \": \", msg.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [msg.timestamp, \" \\u2022 \", msg.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"emoji-btn\",\n          onClick: () => setShowEmojiPicker(prev => !prev),\n          children: \"\\uD83D\\uDE0A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emoji-picker-container\",\n          children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n            onEmojiClick: emojiObject => {\n              setMessage(prev => prev + emojiObject.emoji);\n              setShowEmojiPicker(false);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !isConnected,\n          onClick: () => {\n            if (stompClientRef.current && stompClientRef.current.connected) {\n              stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify({\n                username: username || \"Anonymous\",\n                message: message || \"Empty message\",\n                recipient: recipient || \"\",\n                timestamp: new Date().toLocaleTimeString(),\n                status: \"Sent\"\n              }));\n              setMessage(\"\");\n            }\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"vUs3Z0RK8776dPTK6A5pbyhba4U=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","useRef","SockJS","Stomp","EmojiPicker","jsxDEV","_jsxDEV","ChatRoom","username","recipient","setRecipient","_s","messages","setMessages","message","setMessage","activeUsers","setActiveUsers","darkMode","setDarkMode","showEmojiPicker","setShowEmojiPicker","isRecording","setIsRecording","stompClientRef","isConnected","setIsConnected","latestMessageRef","connectWebSocket","socket","client","over","connect","console","log","topic","subscribe","msg","receivedMessage","JSON","parse","body","prev","timestamp","Date","toLocaleTimeString","status","current","intervalId","setInterval","fetch","then","res","json","data","catch","error","clearInterval","disconnect","scrollIntoView","behavior","handleUserClick","selectedUser","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","user","index","onClick","src","alt","ref","charAt","toUpperCase","onEmojiClick","emojiObject","emoji","type","value","onChange","e","target","placeholder","disabled","connected","send","stringify","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport EmojiPicker from 'emoji-picker-react';\r\nimport './ChatRoom.css';\r\n\r\nconst ChatRoom = ({ username, recipient, setRecipient }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [activeUsers, setActiveUsers] = useState([]);\r\n\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n    const [isRecording, setIsRecording] = useState(false);\r\n\r\n    const stompClientRef = useRef(null);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const latestMessageRef = useRef(null);\r\n    \r\n\r\n    useEffect(() => {\r\n        const connectWebSocket = () => {\r\n            const socket = new SockJS(\"http://localhost:8080/chat\");\r\n            const client = Stomp.over(socket);\r\n\r\n            client.connect({}, () => {\r\n                console.log(\"Connected to WebSocket\");\r\n\r\n                const topic = recipient\r\n                    ? `/topic/private/${recipient}`\r\n                    : `/topic/messages`;\r\n\r\n                client.subscribe(topic, (msg) => {\r\n                    const receivedMessage = JSON.parse(msg.body);\r\n\r\n                    setMessages((prev) => [\r\n                        ...prev,\r\n                        {\r\n                            username: receivedMessage.username,\r\n                            message: receivedMessage.message,\r\n                            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\r\n                            status: receivedMessage.status\r\n                        }\r\n                    ]);\r\n                });\r\n\r\n                stompClientRef.current = client;\r\n                setIsConnected(true);\r\n\r\n                const intervalId = setInterval(() => {\r\n                    fetch(\"http://localhost:8080/active-users\")\r\n                        .then((res) => res.json())\r\n                        .then((data) => setActiveUsers(data))\r\n                        .catch((error) => console.error(\"❌ Failed to fetch active users:\", error));\r\n                }, 5000);\r\n\r\n                return () => clearInterval(intervalId);\r\n            });\r\n        };\r\n\r\n        connectWebSocket();\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.disconnect();\r\n                console.log(\"❌ Disconnected from WebSocket\");\r\n            }\r\n        };\r\n    }, [recipient]);\r\n\r\n    useEffect(() => {\r\n        if (latestMessageRef.current) {\r\n            latestMessageRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [messages]);\r\n\r\n    const handleUserClick = (selectedUser) => {\r\n        if (selectedUser !== username) {\r\n            setRecipient(selectedUser);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`chat-container ${darkMode ? 'dark-theme' : ''}`}>\r\n\r\n            <div className=\"sidebar\">\r\n                <h3>Active Users</h3>\r\n                <ul>\r\n                    {activeUsers.length > 0 ? (\r\n                        activeUsers.map((user, index) => (\r\n                            <li key={index} className=\"user-item\" onClick={() => handleUserClick(user)}>\r\n                                <img \r\n                                    src={`https://i.pravatar.cc/40?u=${user}`} \r\n                                    alt=\"avatar\" \r\n                                    className=\"avatar\" \r\n                                />\r\n                                <span className=\"user-name\">{user}</span>\r\n                                <span className=\"status-indicator online\"></span>\r\n                            </li>\r\n                        ))\r\n                    ) : (\r\n                        <li>No active users</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-header\">\r\n                    <h2>{recipient ? `Private Chat with ${recipient}` : \"Group Chat\"}</h2>\r\n                </div>\r\n\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index} ref={index === messages.length - 1 ? latestMessageRef : null} className={`message ${msg.username === username ? \"sent\" : \"received\"}`}>\r\n                            <div className=\"profile-initials\">\r\n                                {msg.username.charAt(0).toUpperCase()}\r\n                            </div>\r\n                            <div className=\"message-bubble\">\r\n                                <p><strong>{msg.username}</strong>: {msg.message}</p>\r\n                                <small>{msg.timestamp} • {msg.status}</small>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <button className=\"emoji-btn\" onClick={() => setShowEmojiPicker((prev) => !prev)}>\r\n                        😊\r\n                    </button>\r\n\r\n                    {showEmojiPicker && (\r\n                        <div className=\"emoji-picker-container\">\r\n                            <EmojiPicker onEmojiClick={(emojiObject) => {\r\n                                setMessage((prev) => prev + emojiObject.emoji);\r\n                                setShowEmojiPicker(false);\r\n                            }} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} placeholder=\"Type a message...\" />\r\n\r\n                    <button disabled={!isConnected} onClick={() => {\r\n                        if (stompClientRef.current && stompClientRef.current.connected) {\r\n                            stompClientRef.current.send(\r\n                                \"/app/sendMessage\",\r\n                                {},\r\n                                JSON.stringify({\r\n                                    username: username || \"Anonymous\",\r\n                                    message: message || \"Empty message\",\r\n                                    recipient: recipient || \"\",\r\n                                    timestamp: new Date().toLocaleTimeString(),\r\n                                    status: \"Sent\"\r\n                                })\r\n                            );\r\n                            setMessage(\"\");\r\n                        }\r\n                    }}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}