{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport SockJS from \"sockjs-client\";\nimport MessageList from \"./MessageList\";\nimport MessageInput from \"./MessageInput\";\nimport UserList from \"./UserList\";\nimport \"./ChatRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const clientRef = useRef(null);\n  const [connected, setConnected] = useState(false); // ✅ Add connection state\n\n  useEffect(() => {\n    const socket = new SockJS(\"http://localhost:8080/ws\");\n    const client = new Client({\n      webSocketFactory: () => socket,\n      reconnectDelay: 5000,\n      onConnect: () => {\n        console.log(\"✅ Connected to WebSocket\");\n        setConnected(true); // ✅ Set the connection state to true\n\n        // ✅ Subscribe to message and user topics\n        client.subscribe(\"/topic/messages\", message => {\n          const newMessage = JSON.parse(message.body);\n          setMessages(prev => [...prev, newMessage]);\n        });\n        client.subscribe(\"/topic/users\", userList => {\n          const updatedUsers = JSON.parse(userList.body);\n          setUsers(updatedUsers);\n        });\n\n        // Send username on connect\n        client.publish({\n          destination: \"/app/chat.register\",\n          body: JSON.stringify({\n            sender: username,\n            content: \"JOIN\"\n          })\n        });\n      },\n      onDisconnect: () => {\n        console.log(\"❌ Disconnected from WebSocket\");\n        setConnected(false);\n      },\n      onStompError: error => {\n        console.error(\"STOMP error:\", error);\n      }\n    });\n    clientRef.current = client;\n    client.activate();\n    return () => {\n      if (clientRef.current) {\n        clientRef.current.deactivate();\n      }\n      a;\n    };\n  }, [username]);\n\n  // ✅ Enhanced sendMessage function\n  const sendMessage = content => {\n    if (connected && clientRef.current && clientRef.current.connected) {\n      clientRef.current.publish({\n        destination: \"/app/chat.send\",\n        body: JSON.stringify({\n          sender: username,\n          content\n        })\n      });\n    } else {\n      console.warn(\"⚠️ Cannot send message - No STOMP connection\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room\",\n    children: [/*#__PURE__*/_jsxDEV(UserList, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"tCPmWFm75A7TmeJiJeWcyFMpnXI=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Client","SockJS","MessageList","MessageInput","UserList","jsxDEV","_jsxDEV","ChatRoom","username","_s","messages","setMessages","users","setUsers","clientRef","connected","setConnected","socket","client","webSocketFactory","reconnectDelay","onConnect","console","log","subscribe","message","newMessage","JSON","parse","body","prev","userList","updatedUsers","publish","destination","stringify","sender","content","onDisconnect","onStompError","error","current","activate","deactivate","a","sendMessage","warn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\nimport MessageList from \"./MessageList\";\r\nimport MessageInput from \"./MessageInput\";\r\nimport UserList from \"./UserList\";\r\nimport \"./ChatRoom.css\";\r\n\r\nconst ChatRoom = ({ username }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const clientRef = useRef(null);\r\n  const [connected, setConnected] = useState(false);  // ✅ Add connection state\r\n\r\n  useEffect(() => {\r\n    const socket = new SockJS(\"http://localhost:8080/ws\");\r\n    const client = new Client({\r\n      webSocketFactory: () => socket,\r\n      reconnectDelay: 5000,\r\n      onConnect: () => {\r\n        console.log(\"✅ Connected to WebSocket\");\r\n        setConnected(true);  // ✅ Set the connection state to true\r\n\r\n        // ✅ Subscribe to message and user topics\r\n        client.subscribe(\"/topic/messages\", (message) => {\r\n          const newMessage = JSON.parse(message.body);\r\n          setMessages((prev) => [...prev, newMessage]);\r\n        });\r\n\r\n        client.subscribe(\"/topic/users\", (userList) => {\r\n          const updatedUsers = JSON.parse(userList.body);\r\n          setUsers(updatedUsers);\r\n        });\r\n\r\n        // Send username on connect\r\n        client.publish({\r\n          destination: \"/app/chat.register\",\r\n          body: JSON.stringify({ sender: username, content: \"JOIN\" }),\r\n        });\r\n      },\r\n      onDisconnect: () => {\r\n        console.log(\"❌ Disconnected from WebSocket\");\r\n        setConnected(false);\r\n      },\r\n      onStompError: (error) => {\r\n        console.error(\"STOMP error:\", error);\r\n      },\r\n    });\r\n\r\n    clientRef.current = client;\r\n    client.activate();\r\n\r\n    return () => {\r\n      if (clientRef.current) {\r\n        clientRef.current.deactivate();\r\n      }a\r\n    };\r\n  }, [username]);\r\n\r\n  // ✅ Enhanced sendMessage function\r\n  const sendMessage = (content) => {\r\n    if (connected && clientRef.current && clientRef.current.connected) {\r\n      clientRef.current.publish({\r\n        destination: \"/app/chat.send\",\r\n        body: JSON.stringify({ sender: username, content }),\r\n      });\r\n    } else {\r\n      console.warn(\"⚠️ Cannot send message - No STOMP connection\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-room\">\r\n      <UserList users={users} />\r\n      <div className=\"chat-container\">\r\n        <MessageList messages={messages} />\r\n        <MessageInput onSendMessage={sendMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}