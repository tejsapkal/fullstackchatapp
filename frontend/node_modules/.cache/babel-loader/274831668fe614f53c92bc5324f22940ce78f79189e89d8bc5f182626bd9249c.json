{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react'; // ✅ Import useRef\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport './ChatRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username,\n  recipient\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [activeUsers, setActiveUsers] = useState([]);\n  const stompClientRef = useRef(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // ✅ Ref for auto-scrolling\n  const latestMessageRef = useRef(null);\n  useEffect(() => {\n    const connectWebSocket = () => {\n      const socket = new SockJS(\"http://localhost:8080/chat\");\n      const client = Stomp.over(socket);\n      client.connect({}, () => {\n        console.log(\"✅ Connected to WebSocket\");\n        const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\n        client.subscribe(topic, msg => {\n          const receivedMessage = JSON.parse(msg.body);\n          setMessages(prev => [...prev, {\n            username: receivedMessage.username,\n            message: receivedMessage.message,\n            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\n            status: receivedMessage.status\n          }]);\n        });\n        stompClientRef.current = client;\n        setIsConnected(true);\n\n        // Fetch active users\n        fetch(\"http://localhost:8080/active-users\").then(res => res.json()).then(data => setActiveUsers(data));\n      });\n    };\n    connectWebSocket();\n    return () => {\n      if (stompClientRef.current) {\n        stompClientRef.current.disconnect();\n        console.log(\"❌ Disconnected from WebSocket\");\n      }\n    };\n  }, [recipient]);\n\n  // ✅ Auto-scroll when new message arrives\n  useEffect(() => {\n    if (latestMessageRef.current) {\n      latestMessageRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [messages]);\n  const sendMessage = () => {\n    if (stompClientRef.current && stompClientRef.current.connected) {\n      const chatMessage = {\n        username: username || \"Anonymous\",\n        message: message || \"Empty message\",\n        recipient: recipient || \"\",\n        timestamp: new Date().toLocaleTimeString(),\n        status: \"Sent\"\n      };\n      stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n      setMessage(\"\");\n    } else {\n      console.error(\"❌ WebSocket is not connected!\");\n      alert(\"Failed to send message. Connection not established.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Active Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: activeUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: recipient ? `Private Chat with ${recipient}` : \"Group Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: index === messages.length - 1 ? latestMessageRef : null // ✅ Attach ref to the latest message\n          ,\n          className: `message ${msg.username === username ? \"sent\" : \"received\"}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: msg.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 36\n              }, this), \": \", msg.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [msg.timestamp, \" \\u2022 \", msg.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          disabled: !isConnected,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"erS53tE/lo+steYvOKMFNj9uRyo=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","useRef","SockJS","Stomp","jsxDEV","_jsxDEV","ChatRoom","username","recipient","_s","messages","setMessages","message","setMessage","activeUsers","setActiveUsers","stompClientRef","isConnected","setIsConnected","latestMessageRef","connectWebSocket","socket","client","over","connect","console","log","topic","subscribe","msg","receivedMessage","JSON","parse","body","prev","timestamp","Date","toLocaleTimeString","status","current","fetch","then","res","json","data","disconnect","scrollIntoView","behavior","sendMessage","connected","chatMessage","send","stringify","error","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","index","ref","length","type","value","onChange","e","target","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';   // ✅ Import useRef\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport './ChatRoom.css';\r\n\r\nconst ChatRoom = ({ username, recipient }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [activeUsers, setActiveUsers] = useState([]);\r\n    const stompClientRef = useRef(null);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n\r\n    // ✅ Ref for auto-scrolling\r\n    const latestMessageRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const connectWebSocket = () => {\r\n            const socket = new SockJS(\"http://localhost:8080/chat\");\r\n            const client = Stomp.over(socket);\r\n\r\n            client.connect({}, () => {\r\n                console.log(\"✅ Connected to WebSocket\");\r\n\r\n                const topic = recipient \r\n                    ? `/topic/private/${recipient}` \r\n                    : `/topic/messages`;\r\n\r\n                client.subscribe(topic, (msg) => {\r\n                    const receivedMessage = JSON.parse(msg.body);\r\n\r\n                    setMessages((prev) => [\r\n                        ...prev,\r\n                        {\r\n                            username: receivedMessage.username,\r\n                            message: receivedMessage.message,\r\n                            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\r\n                            status: receivedMessage.status\r\n                        }\r\n                    ]);\r\n                });\r\n\r\n                stompClientRef.current = client;\r\n                setIsConnected(true);\r\n\r\n                // Fetch active users\r\n                fetch(\"http://localhost:8080/active-users\")\r\n                    .then((res) => res.json())\r\n                    .then((data) => setActiveUsers(data));\r\n            });\r\n        };\r\n\r\n        connectWebSocket();\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.disconnect();\r\n                console.log(\"❌ Disconnected from WebSocket\");\r\n            }\r\n        };\r\n    }, [recipient]);\r\n\r\n    // ✅ Auto-scroll when new message arrives\r\n    useEffect(() => {\r\n        if (latestMessageRef.current) {\r\n            latestMessageRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [messages]);\r\n\r\n    const sendMessage = () => {\r\n        if (stompClientRef.current && stompClientRef.current.connected) {\r\n            const chatMessage = {\r\n                username: username || \"Anonymous\",\r\n                message: message || \"Empty message\",\r\n                recipient: recipient || \"\",\r\n                timestamp: new Date().toLocaleTimeString(),\r\n                status: \"Sent\"\r\n            };\r\n\r\n            stompClientRef.current.send(\r\n                \"/app/sendMessage\",\r\n                {},\r\n                JSON.stringify(chatMessage)\r\n            );\r\n\r\n            setMessage(\"\");\r\n        } else {\r\n            console.error(\"❌ WebSocket is not connected!\");\r\n            alert(\"Failed to send message. Connection not established.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"sidebar\">\r\n                <h3>Active Users</h3>\r\n                <ul>\r\n                    {activeUsers.map((user, index) => (\r\n                        <li key={index}>{user}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-box\">\r\n                <h2>{recipient ? `Private Chat with ${recipient}` : \"Group Chat\"}</h2>\r\n\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <div\r\n                            key={index}\r\n                            ref={index === messages.length - 1 ? latestMessageRef : null}  // ✅ Attach ref to the latest message\r\n                            className={`message ${msg.username === username ? \"sent\" : \"received\"}`}\r\n                        >\r\n                            <div className=\"message-bubble\">\r\n                                <p><strong>{msg.username}</strong>: {msg.message}</p>\r\n                                <small>{msg.timestamp} • {msg.status}</small>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                    />\r\n                    <button onClick={sendMessage} disabled={!isConnected}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}