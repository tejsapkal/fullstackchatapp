{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\REACT PROJECTS\\\\realtimechatapp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport EmojiPicker from 'emoji-picker-react';\nimport './ChatRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  username,\n  recipient\n}) => {\n  _s();\n  var _stompClientRef$curre3;\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [typingUser, setTypingUser] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const stompClientRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  useEffect(() => {\n    const connectWebSocket = () => {\n      const socket = new SockJS(\"http://localhost:8080/chat\");\n      const client = Stomp.over(socket);\n      client.connect({}, () => {\n        console.log(\"✅ Connected to WebSocket\");\n        const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\n        client.subscribe(topic, msg => {\n          const receivedMessage = JSON.parse(msg.body);\n          setMessages(prev => [...prev, {\n            username: receivedMessage.username,\n            message: receivedMessage.message,\n            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\n            status: receivedMessage.status\n          }]);\n        });\n\n        // Listen for typing events\n        client.subscribe(\"/topic/typing\", msg => {\n          const typingData = JSON.parse(msg.body);\n          if (typingData.username !== username) {\n            setTypingUser(typingData.username);\n            setIsTyping(true);\n            clearTimeout(typingTimeoutRef.current);\n            typingTimeoutRef.current = setTimeout(() => setIsTyping(false), 3000);\n          }\n        });\n        stompClientRef.current = client;\n\n        // Fetch active users every 5 seconds\n        const intervalId = setInterval(() => {\n          fetch(\"http://localhost:8080/active-users\").then(res => res.json()).then(data => setActiveUsers(data)).catch(error => console.error(\"❌ Failed to fetch active users:\", error));\n        }, 5000);\n        return () => clearInterval(intervalId);\n      });\n    };\n    connectWebSocket();\n    return () => {\n      if (stompClientRef.current) {\n        stompClientRef.current.disconnect();\n        console.log(\"❌ Disconnected from WebSocket\");\n      }\n    };\n  }, [recipient, username]); // ✅ Fixed missing dependency warning\n\n  const sendMessage = () => {\n    var _stompClientRef$curre;\n    if ((_stompClientRef$curre = stompClientRef.current) !== null && _stompClientRef$curre !== void 0 && _stompClientRef$curre.connected) {\n      const chatMessage = {\n        username: username || \"Anonymous\",\n        message: message || \"Empty message\",\n        recipient: recipient || \"\",\n        timestamp: new Date().toLocaleTimeString(),\n        status: \"Sent\"\n      };\n      stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n      setMessage(\"\");\n    } else {\n      console.error(\"❌ WebSocket is not connected!\");\n      alert(\"Failed to send message. Connection not established.\");\n    }\n  };\n  const handleTyping = () => {\n    var _stompClientRef$curre2;\n    if ((_stompClientRef$curre2 = stompClientRef.current) !== null && _stompClientRef$curre2 !== void 0 && _stompClientRef$curre2.connected) {\n      stompClientRef.current.send(\"/app/typing\", {}, JSON.stringify({\n        username\n      }));\n    }\n  };\n  const filteredMessages = messages.filter(msg => msg.username.toLowerCase().includes(searchQuery.toLowerCase()) || msg.message.toLowerCase().includes(searchQuery.toLowerCase()));\n  const toggleTheme = () => {\n    setDarkMode(prevMode => !prevMode);\n    document.body.classList.toggle('dark-page', !darkMode);\n  };\n  const handleEmojiClick = emojiObject => {\n    setMessage(prev => prev + emojiObject.emoji);\n    setShowEmojiPicker(false);\n  };\n\n  // Function to get initials from the username\n  const getInitials = name => name ? name.charAt(0).toUpperCase() : \"?\";\n\n  // Function to generate a random color for each user\n  const getRandomColor = name => {\n    const colors = [\"#FF5733\", \"#33FF57\", \"#3357FF\", \"#FF33A8\", \"#FF8C33\"];\n    let index = name ? name.charCodeAt(0) % colors.length : 0;\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-container ${darkMode ? 'dark-theme' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Active Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: activeUsers.length > 0 ? activeUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"No active users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: recipient ? `Private Chat with ${recipient}` : \"Group Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"theme-toggle-btn\",\n          onClick: toggleTheme,\n          children: darkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search messages...\",\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [filteredMessages.length > 0 ? filteredMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.username === username ? \"sent\" : \"received\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profile-initials\",\n            style: {\n              backgroundColor: getRandomColor(msg.username)\n            },\n            children: getInitials(msg.username)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: msg.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 40\n              }, this), \": \", msg.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [msg.timestamp, \" \\u2022 \", msg.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages found...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this), isTyping && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"typing-indicator\",\n          children: [typingUser, \" is typing...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"emoji-btn\",\n          onClick: () => setShowEmojiPicker(prev => !prev),\n          children: \"\\uD83D\\uDE0A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emoji-picker-container\",\n          children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n            onEmojiClick: handleEmojiClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => {\n            setMessage(e.target.value);\n            handleTyping();\n          },\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          disabled: !((_stompClientRef$curre3 = stompClientRef.current) !== null && _stompClientRef$curre3 !== void 0 && _stompClientRef$curre3.connected),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"JA8udACmxtBF4BIKd8KROBA74cQ=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","useRef","SockJS","Stomp","EmojiPicker","jsxDEV","_jsxDEV","ChatRoom","username","recipient","_s","_stompClientRef$curre3","messages","setMessages","message","setMessage","activeUsers","setActiveUsers","searchQuery","setSearchQuery","darkMode","setDarkMode","showEmojiPicker","setShowEmojiPicker","typingUser","setTypingUser","isTyping","setIsTyping","stompClientRef","typingTimeoutRef","connectWebSocket","socket","client","over","connect","console","log","topic","subscribe","msg","receivedMessage","JSON","parse","body","prev","timestamp","Date","toLocaleTimeString","status","typingData","clearTimeout","current","setTimeout","intervalId","setInterval","fetch","then","res","json","data","catch","error","clearInterval","disconnect","sendMessage","_stompClientRef$curre","connected","chatMessage","send","stringify","alert","handleTyping","_stompClientRef$curre2","filteredMessages","filter","toLowerCase","includes","toggleTheme","prevMode","document","classList","toggle","handleEmojiClick","emojiObject","emoji","getInitials","name","charAt","toUpperCase","getRandomColor","colors","index","charCodeAt","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","onClick","type","placeholder","value","onChange","e","target","style","backgroundColor","onEmojiClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/REACT PROJECTS/realtimechatapp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport EmojiPicker from 'emoji-picker-react';\r\nimport './ChatRoom.css';\r\n\r\nconst ChatRoom = ({ username, recipient }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [activeUsers, setActiveUsers] = useState([]);\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n    const [typingUser, setTypingUser] = useState(\"\");\r\n    const [isTyping, setIsTyping] = useState(false);\r\n\r\n    const stompClientRef = useRef(null);\r\n    const typingTimeoutRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const connectWebSocket = () => {\r\n            const socket = new SockJS(\"http://localhost:8080/chat\");\r\n            const client = Stomp.over(socket);\r\n\r\n            client.connect({}, () => {\r\n                console.log(\"✅ Connected to WebSocket\");\r\n\r\n                const topic = recipient ? `/topic/private/${recipient}` : `/topic/messages`;\r\n\r\n                client.subscribe(topic, (msg) => {\r\n                    const receivedMessage = JSON.parse(msg.body);\r\n\r\n                    setMessages((prev) => [\r\n                        ...prev,\r\n                        {\r\n                            username: receivedMessage.username,\r\n                            message: receivedMessage.message,\r\n                            timestamp: receivedMessage.timestamp || new Date().toLocaleTimeString(),\r\n                            status: receivedMessage.status\r\n                        }\r\n                    ]);\r\n                });\r\n\r\n                // Listen for typing events\r\n                client.subscribe(\"/topic/typing\", (msg) => {\r\n                    const typingData = JSON.parse(msg.body);\r\n                    if (typingData.username !== username) {\r\n                        setTypingUser(typingData.username);\r\n                        setIsTyping(true);\r\n                        clearTimeout(typingTimeoutRef.current);\r\n                        typingTimeoutRef.current = setTimeout(() => setIsTyping(false), 3000);\r\n                    }\r\n                });\r\n\r\n                stompClientRef.current = client;\r\n\r\n                // Fetch active users every 5 seconds\r\n                const intervalId = setInterval(() => {\r\n                    fetch(\"http://localhost:8080/active-users\")\r\n                        .then((res) => res.json())\r\n                        .then((data) => setActiveUsers(data))\r\n                        .catch((error) => console.error(\"❌ Failed to fetch active users:\", error));\r\n                }, 5000);\r\n\r\n                return () => clearInterval(intervalId);\r\n            });\r\n        };\r\n\r\n        connectWebSocket();\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.disconnect();\r\n                console.log(\"❌ Disconnected from WebSocket\");\r\n            }\r\n        };\r\n    }, [recipient, username]); // ✅ Fixed missing dependency warning\r\n\r\n    const sendMessage = () => {\r\n        if (stompClientRef.current?.connected) {\r\n            const chatMessage = {\r\n                username: username || \"Anonymous\",\r\n                message: message || \"Empty message\",\r\n                recipient: recipient || \"\",\r\n                timestamp: new Date().toLocaleTimeString(),\r\n                status: \"Sent\"\r\n            };\r\n\r\n            stompClientRef.current.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\r\n            setMessage(\"\");\r\n        } else {\r\n            console.error(\"❌ WebSocket is not connected!\");\r\n            alert(\"Failed to send message. Connection not established.\");\r\n        }\r\n    };\r\n\r\n    const handleTyping = () => {\r\n        if (stompClientRef.current?.connected) {\r\n            stompClientRef.current.send(\"/app/typing\", {}, JSON.stringify({ username }));\r\n        }\r\n    };\r\n\r\n    const filteredMessages = messages.filter(\r\n        (msg) =>\r\n            msg.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            msg.message.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n\r\n    const toggleTheme = () => {\r\n        setDarkMode((prevMode) => !prevMode);\r\n        document.body.classList.toggle('dark-page', !darkMode);\r\n    };\r\n\r\n    const handleEmojiClick = (emojiObject) => {\r\n        setMessage((prev) => prev + emojiObject.emoji);\r\n        setShowEmojiPicker(false);\r\n    };\r\n\r\n    // Function to get initials from the username\r\n    const getInitials = (name) => (name ? name.charAt(0).toUpperCase() : \"?\");\r\n\r\n    // Function to generate a random color for each user\r\n    const getRandomColor = (name) => {\r\n        const colors = [\"#FF5733\", \"#33FF57\", \"#3357FF\", \"#FF33A8\", \"#FF8C33\"];\r\n        let index = name ? name.charCodeAt(0) % colors.length : 0;\r\n        return colors[index];\r\n    };\r\n\r\n    return (\r\n        <div className={`chat-container ${darkMode ? 'dark-theme' : ''}`}>\r\n\r\n            <div className=\"sidebar\">\r\n                <h3>Active Users</h3>\r\n                <ul>\r\n                    {activeUsers.length > 0 ? (\r\n                        activeUsers.map((user, index) => (\r\n                            <li key={index}>{user}</li>\r\n                        ))\r\n                    ) : (\r\n                        <li>No active users</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-header\">\r\n                    <h2>{recipient ? `Private Chat with ${recipient}` : \"Group Chat\"}</h2>\r\n                    <button className=\"theme-toggle-btn\" onClick={toggleTheme}>\r\n                        {darkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\"}\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"search-bar\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search messages...\"\r\n                        value={searchQuery}\r\n                        onChange={(e) => setSearchQuery(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"messages\">\r\n                    {filteredMessages.length > 0 ? (\r\n                        filteredMessages.map((msg, index) => (\r\n                            <div key={index} className={`message ${msg.username === username ? \"sent\" : \"received\"}`}>\r\n                                <div className=\"profile-initials\" style={{ backgroundColor: getRandomColor(msg.username) }}>\r\n                                    {getInitials(msg.username)}\r\n                                </div>\r\n                                <div className=\"message-bubble\">\r\n                                    <p><strong>{msg.username}</strong>: {msg.message}</p>\r\n                                    <small>{msg.timestamp} • {msg.status}</small>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <p>No messages found...</p>\r\n                    )}\r\n                    {isTyping && <p className=\"typing-indicator\">{typingUser} is typing...</p>}\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <button className=\"emoji-btn\" onClick={() => setShowEmojiPicker((prev) => !prev)}>\r\n                        😊\r\n                    </button>\r\n\r\n                    {showEmojiPicker && (\r\n                        <div className=\"emoji-picker-container\">\r\n                            <EmojiPicker onEmojiClick={handleEmojiClick} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => {\r\n                            setMessage(e.target.value);\r\n                            handleTyping();\r\n                        }}\r\n                        placeholder=\"Type a message...\"\r\n                    />\r\n                    <button onClick={sendMessage} disabled={!stompClientRef.current?.connected}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,sBAAA;EAC1C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACsB,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAM4B,cAAc,GAAG3B,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM4B,gBAAgB,GAAG5B,MAAM,CAAC,IAAI,CAAC;EAErCF,SAAS,CAAC,MAAM;IACZ,MAAM+B,gBAAgB,GAAGA,CAAA,KAAM;MAC3B,MAAMC,MAAM,GAAG,IAAI7B,MAAM,CAAC,4BAA4B,CAAC;MACvD,MAAM8B,MAAM,GAAG7B,KAAK,CAAC8B,IAAI,CAACF,MAAM,CAAC;MAEjCC,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;QACrBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QAEvC,MAAMC,KAAK,GAAG5B,SAAS,GAAG,kBAAkBA,SAAS,EAAE,GAAG,iBAAiB;QAE3EuB,MAAM,CAACM,SAAS,CAACD,KAAK,EAAGE,GAAG,IAAK;UAC7B,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAACI,IAAI,CAAC;UAE5C9B,WAAW,CAAE+B,IAAI,IAAK,CAClB,GAAGA,IAAI,EACP;YACIpC,QAAQ,EAAEgC,eAAe,CAAChC,QAAQ;YAClCM,OAAO,EAAE0B,eAAe,CAAC1B,OAAO;YAChC+B,SAAS,EAAEL,eAAe,CAACK,SAAS,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;YACvEC,MAAM,EAAER,eAAe,CAACQ;UAC5B,CAAC,CACJ,CAAC;QACN,CAAC,CAAC;;QAEF;QACAhB,MAAM,CAACM,SAAS,CAAC,eAAe,EAAGC,GAAG,IAAK;UACvC,MAAMU,UAAU,GAAGR,IAAI,CAACC,KAAK,CAACH,GAAG,CAACI,IAAI,CAAC;UACvC,IAAIM,UAAU,CAACzC,QAAQ,KAAKA,QAAQ,EAAE;YAClCiB,aAAa,CAACwB,UAAU,CAACzC,QAAQ,CAAC;YAClCmB,WAAW,CAAC,IAAI,CAAC;YACjBuB,YAAY,CAACrB,gBAAgB,CAACsB,OAAO,CAAC;YACtCtB,gBAAgB,CAACsB,OAAO,GAAGC,UAAU,CAAC,MAAMzB,WAAW,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;UACzE;QACJ,CAAC,CAAC;QAEFC,cAAc,CAACuB,OAAO,GAAGnB,MAAM;;QAE/B;QACA,MAAMqB,UAAU,GAAGC,WAAW,CAAC,MAAM;UACjCC,KAAK,CAAC,oCAAoC,CAAC,CACtCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK1C,cAAc,CAAC0C,IAAI,CAAC,CAAC,CACpCC,KAAK,CAAEC,KAAK,IAAK1B,OAAO,CAAC0B,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC,CAAC;QAClF,CAAC,EAAE,IAAI,CAAC;QAER,OAAO,MAAMC,aAAa,CAACT,UAAU,CAAC;MAC1C,CAAC,CAAC;IACN,CAAC;IAEDvB,gBAAgB,CAAC,CAAC;IAElB,OAAO,MAAM;MACT,IAAIF,cAAc,CAACuB,OAAO,EAAE;QACxBvB,cAAc,CAACuB,OAAO,CAACY,UAAU,CAAC,CAAC;QACnC5B,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAChD;IACJ,CAAC;EACL,CAAC,EAAE,CAAC3B,SAAS,EAAED,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE3B,MAAMwD,WAAW,GAAGA,CAAA,KAAM;IAAA,IAAAC,qBAAA;IACtB,KAAAA,qBAAA,GAAIrC,cAAc,CAACuB,OAAO,cAAAc,qBAAA,eAAtBA,qBAAA,CAAwBC,SAAS,EAAE;MACnC,MAAMC,WAAW,GAAG;QAChB3D,QAAQ,EAAEA,QAAQ,IAAI,WAAW;QACjCM,OAAO,EAAEA,OAAO,IAAI,eAAe;QACnCL,SAAS,EAAEA,SAAS,IAAI,EAAE;QAC1BoC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;QAC1CC,MAAM,EAAE;MACZ,CAAC;MAEDpB,cAAc,CAACuB,OAAO,CAACiB,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,EAAE3B,IAAI,CAAC4B,SAAS,CAACF,WAAW,CAAC,CAAC;MAChFpD,UAAU,CAAC,EAAE,CAAC;IAClB,CAAC,MAAM;MACHoB,OAAO,CAAC0B,KAAK,CAAC,+BAA+B,CAAC;MAC9CS,KAAK,CAAC,qDAAqD,CAAC;IAChE;EACJ,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IAAA,IAAAC,sBAAA;IACvB,KAAAA,sBAAA,GAAI5C,cAAc,CAACuB,OAAO,cAAAqB,sBAAA,eAAtBA,sBAAA,CAAwBN,SAAS,EAAE;MACnCtC,cAAc,CAACuB,OAAO,CAACiB,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE3B,IAAI,CAAC4B,SAAS,CAAC;QAAE7D;MAAS,CAAC,CAAC,CAAC;IAChF;EACJ,CAAC;EAED,MAAMiE,gBAAgB,GAAG7D,QAAQ,CAAC8D,MAAM,CACnCnC,GAAG,IACAA,GAAG,CAAC/B,QAAQ,CAACmE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC1D,WAAW,CAACyD,WAAW,CAAC,CAAC,CAAC,IAC9DpC,GAAG,CAACzB,OAAO,CAAC6D,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC1D,WAAW,CAACyD,WAAW,CAAC,CAAC,CACpE,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAM;IACtBxD,WAAW,CAAEyD,QAAQ,IAAK,CAACA,QAAQ,CAAC;IACpCC,QAAQ,CAACpC,IAAI,CAACqC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAE,CAAC7D,QAAQ,CAAC;EAC1D,CAAC;EAED,MAAM8D,gBAAgB,GAAIC,WAAW,IAAK;IACtCpE,UAAU,CAAE6B,IAAI,IAAKA,IAAI,GAAGuC,WAAW,CAACC,KAAK,CAAC;IAC9C7D,kBAAkB,CAAC,KAAK,CAAC;EAC7B,CAAC;;EAED;EACA,MAAM8D,WAAW,GAAIC,IAAI,IAAMA,IAAI,GAAGA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,GAAI;;EAEzE;EACA,MAAMC,cAAc,GAAIH,IAAI,IAAK;IAC7B,MAAMI,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;IACtE,IAAIC,KAAK,GAAGL,IAAI,GAAGA,IAAI,CAACM,UAAU,CAAC,CAAC,CAAC,GAAGF,MAAM,CAACG,MAAM,GAAG,CAAC;IACzD,OAAOH,MAAM,CAACC,KAAK,CAAC;EACxB,CAAC;EAED,oBACIrF,OAAA;IAAKwF,SAAS,EAAE,kBAAkB1E,QAAQ,GAAG,YAAY,GAAG,EAAE,EAAG;IAAA2E,QAAA,gBAE7DzF,OAAA;MAAKwF,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACpBzF,OAAA;QAAAyF,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB7F,OAAA;QAAAyF,QAAA,EACK/E,WAAW,CAAC6E,MAAM,GAAG,CAAC,GACnB7E,WAAW,CAACoF,GAAG,CAAC,CAACC,IAAI,EAAEV,KAAK,kBACxBrF,OAAA;UAAAyF,QAAA,EAAiBM;QAAI,GAAZV,KAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAC7B,CAAC,gBAEF7F,OAAA;UAAAyF,QAAA,EAAI;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAC1B;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAEN7F,OAAA;MAAKwF,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACrBzF,OAAA;QAAKwF,SAAS,EAAC,aAAa;QAAAC,QAAA,gBACxBzF,OAAA;UAAAyF,QAAA,EAAKtF,SAAS,GAAG,qBAAqBA,SAAS,EAAE,GAAG;QAAY;UAAAuF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACtE7F,OAAA;UAAQwF,SAAS,EAAC,kBAAkB;UAACQ,OAAO,EAAEzB,WAAY;UAAAkB,QAAA,EACrD3E,QAAQ,GAAG,eAAe,GAAG;QAAc;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eAEN7F,OAAA;QAAKwF,SAAS,EAAC,YAAY;QAAAC,QAAA,eACvBzF,OAAA;UACIiG,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,oBAAoB;UAChCC,KAAK,EAAEvF,WAAY;UACnBwF,QAAQ,EAAGC,CAAC,IAAKxF,cAAc,CAACwF,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEN7F,OAAA;QAAKwF,SAAS,EAAC,UAAU;QAAAC,QAAA,GACpBtB,gBAAgB,CAACoB,MAAM,GAAG,CAAC,GACxBpB,gBAAgB,CAAC2B,GAAG,CAAC,CAAC7D,GAAG,EAAEoD,KAAK,kBAC5BrF,OAAA;UAAiBwF,SAAS,EAAE,WAAWvD,GAAG,CAAC/B,QAAQ,KAAKA,QAAQ,GAAG,MAAM,GAAG,UAAU,EAAG;UAAAuF,QAAA,gBACrFzF,OAAA;YAAKwF,SAAS,EAAC,kBAAkB;YAACe,KAAK,EAAE;cAAEC,eAAe,EAAErB,cAAc,CAAClD,GAAG,CAAC/B,QAAQ;YAAE,CAAE;YAAAuF,QAAA,EACtFV,WAAW,CAAC9C,GAAG,CAAC/B,QAAQ;UAAC;YAAAwF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzB,CAAC,eACN7F,OAAA;YAAKwF,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC3BzF,OAAA;cAAAyF,QAAA,gBAAGzF,OAAA;gBAAAyF,QAAA,EAASxD,GAAG,CAAC/B;cAAQ;gBAAAwF,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CAAC,MAAE,EAAC5D,GAAG,CAACzB,OAAO;YAAA;cAAAkF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACrD7F,OAAA;cAAAyF,QAAA,GAAQxD,GAAG,CAACM,SAAS,EAAC,UAAG,EAACN,GAAG,CAACS,MAAM;YAAA;cAAAgD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5C,CAAC;QAAA,GAPAR,KAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQV,CACR,CAAC,gBAEF7F,OAAA;UAAAyF,QAAA,EAAG;QAAoB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAC7B,EACAzE,QAAQ,iBAAIpB,OAAA;UAAGwF,SAAS,EAAC,kBAAkB;UAAAC,QAAA,GAAEvE,UAAU,EAAC,eAAa;QAAA;UAAAwE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CAAC,eAEN7F,OAAA;QAAKwF,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC5BzF,OAAA;UAAQwF,SAAS,EAAC,WAAW;UAACQ,OAAO,EAAEA,CAAA,KAAM/E,kBAAkB,CAAEqB,IAAI,IAAK,CAACA,IAAI,CAAE;UAAAmD,QAAA,EAAC;QAElF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAER7E,eAAe,iBACZhB,OAAA;UAAKwF,SAAS,EAAC,wBAAwB;UAAAC,QAAA,eACnCzF,OAAA,CAACF,WAAW;YAAC2G,YAAY,EAAE7B;UAAiB;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CACR,eAED7F,OAAA;UACIiG,IAAI,EAAC,MAAM;UACXE,KAAK,EAAE3F,OAAQ;UACf4F,QAAQ,EAAGC,CAAC,IAAK;YACb5F,UAAU,CAAC4F,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;YAC1BlC,YAAY,CAAC,CAAC;UAClB,CAAE;UACFiC,WAAW,EAAC;QAAmB;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC,eACF7F,OAAA;UAAQgG,OAAO,EAAEtC,WAAY;UAACgD,QAAQ,EAAE,GAAArG,sBAAA,GAACiB,cAAc,CAACuB,OAAO,cAAAxC,sBAAA,eAAtBA,sBAAA,CAAwBuD,SAAS,CAAC;UAAA6B,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACzF,EAAA,CAvMIH,QAAQ;AAAA0G,EAAA,GAAR1G,QAAQ;AAyMd,eAAeA,QAAQ;AAAC,IAAA0G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}